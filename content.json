{"meta":{"title":"Cynen","subtitle":"","description":"一条有梦想的咸鱼","author":"Cynen","url":"http://cynen.github.io","root":"/"},"pages":[{"title":"About","date":"2019-11-24T09:58:55.802Z","updated":"2019-11-24T09:58:55.802Z","comments":true,"path":"about/index.html","permalink":"http://cynen.github.io/about/index.html","excerpt":"","text":"关于我联系我Github: cynenEmail: cynen@foxmail.com微信: 友情链接百度一下&nbsp;|&nbsp;QQ"},{"title":"archives","date":"2019-11-21T13:07:58.000Z","updated":"2019-11-23T18:59:19.903Z","comments":true,"path":"archives/index.html","permalink":"http://cynen.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-20T12:25:08.000Z","updated":"2019-11-23T18:59:12.983Z","comments":false,"path":"categories/index.html","permalink":"http://cynen.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-20T12:24:49.000Z","updated":"2019-11-23T18:59:28.774Z","comments":false,"path":"tags/index.html","permalink":"http://cynen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"自建vpn服务器","slug":"自建vpn服务器","date":"2019-11-24T12:52:03.000Z","updated":"2019-11-24T13:25:24.904Z","comments":true,"path":"2019/11/24/自建vpn服务器/","link":"","permalink":"http://cynen.github.io/2019/11/24/%E8%87%AA%E5%BB%BAvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"VPN简介天朝有时候还是需要去外面看一下的.虽然身体不允许[没钱,哈哈],但是心里偶尔还是可以的.本文主要是介绍如何简单的自己搭建一个梯子. 准备环境服务器:服务器是有要求的,链接服务器后,需要ping google能够ping通,才可以的.所以,VPN实际的作用,就是墙内电脑通过VPN做代理,让自己在处于墙外进行信息获取.所以,作为代理的服务器,一定是需要能够链接到墙外的.服务器主要是安装代理服务端. 阿里云 海外节点. vultr pussr.net 手机: [百度吧,我就不一一列举了] ShadowSockR ShadowSockS 电脑: ShadowsocksR相关软件下载链接: SSR工具 搭建vpn参考: 搭建VPN CentOS 6和7/Debian6+/Ubuntu14+ ShadowsocksR一键部署管理脚本（2018.11.21更新）： 脚本一（2018.11.20更新） 123yum -y install wgetwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh 备用脚本二（2018.11.21更新） 如果上面的脚本暂时用不了，可以用下面的备用脚本，备用脚本没有单独做图文教程，自己摸索下就会了。备用脚本卸载命令：./shadowsocksR.sh uninstall 1234567yum -y install wgetwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 如果提示 wget: command not found 的错误，这是你的系统精简的太干净了，wget都没有安装，所以需要安装wget。CentOS系统安装wget命令: yum install -y wget Debian/Ubuntu系统安装wget命令:apt-get install -y wget Docker 安装SSR已经制作好了镜像,直接下载镜像即可运行ssr Docker搭建SSR这里可能比较繁琐,需要自己构建一个镜像.实际镜像可以通过一下命令直接获取: 1docker pull cynen/alpinessr:1.1 默认是: 8380端口密码是: 666666 脚本文件此脚本文件只做备份使用! 使用教程:1.件此脚本文件下载到本地服务器上.wget ... ssr.sh2.赋予 sh权限.chmod +x ssr.sh3.执行脚本:bash ssr.sh4.按照页面提示选择即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628728828929029129229329429529629729829930030130230330430530630730830931031131231331431531631731831932032132232332432532632732832933033133233333433533633733833934034134234334434534634734834935035135235335435535635735835936036136236336436536636736836937037137237337437537637737837938038138238338438538638738838939039139239339439539639739839940040140240340440540640740840941041141241341441541641741841942042142242342442542642742842943043143243343443543643743843944044144244344444544644744844945045145245345445545645745845946046146246346446546646746846947047147247347447547647747847948048148248348448548648748848949049149249349449549649749849950050150250350450550650750850951051151251351451551651751851952052152252352452552652752852953053153253353453553653753853954054154254354454554654754854955055155255355455555655755855956056156256356456556656756856957057157257357457557657757857958058158258358458558658758858959059159259359459559659759859960060160260360460560660760860961061161261361461561661761861962062162262362462562662762862963063163263363463563663763863964064164264364464564664764864965065165265365465565665765865966066166266366466566666766866967067167267367467567667767867968068168268368468568668768868969069169269369469569669769869970070170270370470570670770870971071171271371471571671771871972072172272372472572672772872973073173273373473573673773873974074174274374474574674774874975075175275375475575675775875976076176276376476576676776876977077177277377477577677777877978078178278378478578678778878979079179279379479579679779879980080180280380480580680780880981081181281381481581681781881982082182282382482582682782882983083183283383483583683783883984084184284384484584684784884985085185285385485585685785885986086186286386486586686786886987087187287387487587687787887988088188288388488588688788888989089189289389489589689789889990090190290390490590690790890991091191291391491591691791891992092192292392492592692792892993093193293393493593693793893994094194294394494594694794894995095195295395495595695795895996096196296396496596696796896997097197297397497597697797897998098198298398498598698798898999099199299399499599699799899910001001100210031004100510061007100810091010101110121013101410151016101710181019102010211022102310241025102610271028102910301031103210331034103510361037103810391040104110421043104410451046104710481049105010511052105310541055105610571058105910601061106210631064106510661067106810691070107110721073107410751076107710781079108010811082108310841085108610871088108910901091109210931094109510961097109810991100110111021103110411051106110711081109111011111112111311141115111611171118111911201121112211231124112511261127112811291130113111321133113411351136113711381139114011411142114311441145114611471148114911501151115211531154115511561157115811591160116111621163116411651166116711681169117011711172117311741175117611771178117911801181118211831184118511861187118811891190119111921193119411951196119711981199120012011202120312041205120612071208120912101211121212131214121512161217121812191220122112221223122412251226122712281229123012311232123312341235123612371238123912401241124212431244124512461247124812491250125112521253125412551256125712581259126012611262126312641265126612671268126912701271127212731274127512761277127812791280128112821283128412851286128712881289129012911292129312941295129612971298129913001301130213031304130513061307130813091310131113121313131413151316131713181319132013211322132313241325132613271328132913301331133213331334133513361337133813391340134113421343134413451346134713481349135013511352135313541355135613571358135913601361136213631364136513661367136813691370137113721373137413751376137713781379138013811382138313841385138613871388138913901391139213931394139513961397139813991400140114021403140414051406140714081409141014111412141314141415141614171418141914201421142214231424142514261427142814291430143114321433143414351436143714381439144014411442144314441445144614471448144914501451145214531454145514561457145814591460146114621463146414651466146714681469147014711472147314741475147614771478147914801481148214831484148514861487148814891490149114921493149414951496149714981499150015011502150315041505150615071508150915101511151215131514151515161517151815191520152115221523152415251526#!/usr/bin/env bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATH#=================================================# System Required: CentOS 6+/Debian 6+/Ubuntu 14.04+# Description: Install the ShadowsocksR server# Version: 2.0.38# Author: Toyo# Blog: https://doub.io/ss-jc42/#=================================================sh_ver=&quot;2.0.38&quot;filepath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)file=$(echo -e &quot;$&#123;filepath&#125;&quot;|awk -F &quot;$0&quot; &apos;&#123;print $1&#125;&apos;)ssr_folder=&quot;/usr/local/shadowsocksr&quot;ssr_ss_file=&quot;$&#123;ssr_folder&#125;/shadowsocks&quot;config_file=&quot;$&#123;ssr_folder&#125;/config.json&quot;config_folder=&quot;/etc/shadowsocksr&quot;config_user_file=&quot;$&#123;config_folder&#125;/user-config.json&quot;ssr_log_file=&quot;$&#123;ssr_ss_file&#125;/ssserver.log&quot;Libsodiumr_file=&quot;/usr/local/lib/libsodium.so&quot;Libsodiumr_ver_backup=&quot;1.0.13&quot;Server_Speeder_file=&quot;/serverspeeder/bin/serverSpeeder.sh&quot;LotServer_file=&quot;/appex/bin/serverSpeeder.sh&quot;BBR_file=&quot;$&#123;file&#125;/bbr.sh&quot;jq_file=&quot;$&#123;ssr_folder&#125;/jq&quot;Green_font_prefix=&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix=&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix=&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix=&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix=&quot;\\033[0m&quot;Info=&quot;$&#123;Green_font_prefix&#125;[信息]$&#123;Font_color_suffix&#125;&quot;Error=&quot;$&#123;Red_font_prefix&#125;[错误]$&#123;Font_color_suffix&#125;&quot;Tip=&quot;$&#123;Green_font_prefix&#125;[注意]$&#123;Font_color_suffix&#125;&quot;Separator_1=&quot;——————————————————————————————&quot;check_root()&#123; [[ $EUID != 0 ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 当前账号非ROOT(或没有ROOT权限)，无法继续操作，请使用$&#123;Green_background_prefix&#125; sudo su $&#123;Font_color_suffix&#125;来获取临时ROOT权限（执行后会提示输入当前账号的密码）。&quot; &amp;&amp; exit 1&#125;check_sys()&#123; if [[ -f /etc/redhat-release ]]; then release=&quot;centos&quot; elif cat /etc/issue | grep -q -E -i &quot;debian&quot;; then release=&quot;debian&quot; elif cat /etc/issue | grep -q -E -i &quot;ubuntu&quot;; then release=&quot;ubuntu&quot; elif cat /etc/issue | grep -q -E -i &quot;centos|red hat|redhat&quot;; then release=&quot;centos&quot; elif cat /proc/version | grep -q -E -i &quot;debian&quot;; then release=&quot;debian&quot; elif cat /proc/version | grep -q -E -i &quot;ubuntu&quot;; then release=&quot;ubuntu&quot; elif cat /proc/version | grep -q -E -i &quot;centos|red hat|redhat&quot;; then release=&quot;centos&quot; fi bit=`uname -m`&#125;check_pid()&#123; PID=`ps -ef |grep -v grep | grep server.py |awk &apos;&#123;print $2&#125;&apos;`&#125;SSR_installation_status()&#123; [[ ! -e $&#123;config_user_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有发现 ShadowsocksR 配置文件，请检查 !&quot; &amp;&amp; exit 1 [[ ! -e $&#123;ssr_folder&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有发现 ShadowsocksR 文件夹，请检查 !&quot; &amp;&amp; exit 1&#125;Server_Speeder_installation_status()&#123; [[ ! -e $&#123;Server_Speeder_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有安装 锐速(Server Speeder)，请检查 !&quot; &amp;&amp; exit 1&#125;LotServer_installation_status()&#123; [[ ! -e $&#123;LotServer_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有安装 LotServer，请检查 !&quot; &amp;&amp; exit 1&#125;BBR_installation_status()&#123; if [[ ! -e $&#123;BBR_file&#125; ]]; then echo -e &quot;$&#123;Error&#125; 没有发现 BBR脚本，开始下载...&quot; cd &quot;$&#123;file&#125;&quot; if ! wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/bbr.sh; then echo -e &quot;$&#123;Error&#125; BBR 脚本下载失败 !&quot; &amp;&amp; exit 1 else echo -e &quot;$&#123;Info&#125; BBR 脚本下载完成 !&quot; chmod +x bbr.sh fi fi&#125;# 设置 防火墙规则Add_iptables()&#123; iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;ssr_port&#125; -j ACCEPT iptables -I INPUT -m state --state NEW -m udp -p udp --dport $&#123;ssr_port&#125; -j ACCEPT ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;ssr_port&#125; -j ACCEPT ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport $&#123;ssr_port&#125; -j ACCEPT&#125;Del_iptables()&#123; iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;port&#125; -j ACCEPT iptables -D INPUT -m state --state NEW -m udp -p udp --dport $&#123;port&#125; -j ACCEPT ip6tables -D INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;port&#125; -j ACCEPT ip6tables -D INPUT -m state --state NEW -m udp -p udp --dport $&#123;port&#125; -j ACCEPT&#125;Save_iptables()&#123; if [[ $&#123;release&#125; == &quot;centos&quot; ]]; then service iptables save service ip6tables save else iptables-save &gt; /etc/iptables.up.rules ip6tables-save &gt; /etc/ip6tables.up.rules fi&#125;Set_iptables()&#123; if [[ $&#123;release&#125; == &quot;centos&quot; ]]; then service iptables save service ip6tables save chkconfig --level 2345 iptables on chkconfig --level 2345 ip6tables on else iptables-save &gt; /etc/iptables.up.rules ip6tables-save &gt; /etc/ip6tables.up.rules echo -e &apos;#!/bin/bash\\n/sbin/iptables-restore &lt; /etc/iptables.up.rules\\n/sbin/ip6tables-restore &lt; /etc/ip6tables.up.rules&apos; &gt; /etc/network/if-pre-up.d/iptables chmod +x /etc/network/if-pre-up.d/iptables fi&#125;# 读取 配置信息Get_IP()&#123; ip=$(wget -qO- -t1 -T2 ipinfo.io/ip) if [[ -z &quot;$&#123;ip&#125;&quot; ]]; then ip=$(wget -qO- -t1 -T2 api.ip.sb/ip) if [[ -z &quot;$&#123;ip&#125;&quot; ]]; then ip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip) if [[ -z &quot;$&#123;ip&#125;&quot; ]]; then ip=&quot;VPS_IP&quot; fi fi fi&#125;Get_User()&#123; [[ ! -e $&#123;jq_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; JQ解析器 不存在，请检查 !&quot; &amp;&amp; exit 1 port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` password=`$&#123;jq_file&#125; &apos;.password&apos; $&#123;config_user_file&#125; | sed &apos;s/^.//;s/.$//&apos;` method=`$&#123;jq_file&#125; &apos;.method&apos; $&#123;config_user_file&#125; | sed &apos;s/^.//;s/.$//&apos;` protocol=`$&#123;jq_file&#125; &apos;.protocol&apos; $&#123;config_user_file&#125; | sed &apos;s/^.//;s/.$//&apos;` obfs=`$&#123;jq_file&#125; &apos;.obfs&apos; $&#123;config_user_file&#125; | sed &apos;s/^.//;s/.$//&apos;` protocol_param=`$&#123;jq_file&#125; &apos;.protocol_param&apos; $&#123;config_user_file&#125; | sed &apos;s/^.//;s/.$//&apos;` speed_limit_per_con=`$&#123;jq_file&#125; &apos;.speed_limit_per_con&apos; $&#123;config_user_file&#125;` speed_limit_per_user=`$&#123;jq_file&#125; &apos;.speed_limit_per_user&apos; $&#123;config_user_file&#125;` connect_verbose_info=`$&#123;jq_file&#125; &apos;.connect_verbose_info&apos; $&#123;config_user_file&#125;`&#125;urlsafe_base64()&#123; date=$(echo -n &quot;$1&quot;|base64|sed &apos;:a;N;s/\\n/ /g;ta&apos;|sed &apos;s/ //g;s/=//g;s/+/-/g;s/\\//_/g&apos;) echo -e &quot;$&#123;date&#125;&quot;&#125;ss_link_qr()&#123; SSbase64=$(urlsafe_base64 &quot;$&#123;method&#125;:$&#123;password&#125;@$&#123;ip&#125;:$&#123;port&#125;&quot;) SSurl=&quot;ss://$&#123;SSbase64&#125;&quot; SSQRcode=&quot;http://doub.pw/qr/qr.php?text=$&#123;SSurl&#125;&quot; ss_link=&quot; SS 链接 : $&#123;Green_font_prefix&#125;$&#123;SSurl&#125;$&#123;Font_color_suffix&#125; \\n SS 二维码 : $&#123;Green_font_prefix&#125;$&#123;SSQRcode&#125;$&#123;Font_color_suffix&#125;&quot;&#125;ssr_link_qr()&#123; SSRprotocol=$(echo $&#123;protocol&#125; | sed &apos;s/_compatible//g&apos;) SSRobfs=$(echo $&#123;obfs&#125; | sed &apos;s/_compatible//g&apos;) SSRPWDbase64=$(urlsafe_base64 &quot;$&#123;password&#125;&quot;) SSRbase64=$(urlsafe_base64 &quot;$&#123;ip&#125;:$&#123;port&#125;:$&#123;SSRprotocol&#125;:$&#123;method&#125;:$&#123;SSRobfs&#125;:$&#123;SSRPWDbase64&#125;&quot;) SSRurl=&quot;ssr://$&#123;SSRbase64&#125;&quot; SSRQRcode=&quot;http://doub.pw/qr/qr.php?text=$&#123;SSRurl&#125;&quot; ssr_link=&quot; SSR 链接 : $&#123;Red_font_prefix&#125;$&#123;SSRurl&#125;$&#123;Font_color_suffix&#125; \\n SSR 二维码 : $&#123;Red_font_prefix&#125;$&#123;SSRQRcode&#125;$&#123;Font_color_suffix&#125; \\n &quot;&#125;ss_ssr_determine()&#123; protocol_suffix=`echo $&#123;protocol&#125; | awk -F &quot;_&quot; &apos;&#123;print $NF&#125;&apos;` obfs_suffix=`echo $&#123;obfs&#125; | awk -F &quot;_&quot; &apos;&#123;print $NF&#125;&apos;` if [[ $&#123;protocol&#125; = &quot;origin&quot; ]]; then if [[ $&#123;obfs&#125; = &quot;plain&quot; ]]; then ss_link_qr ssr_link=&quot;&quot; else if [[ $&#123;obfs_suffix&#125; != &quot;compatible&quot; ]]; then ss_link=&quot;&quot; else ss_link_qr fi fi else if [[ $&#123;protocol_suffix&#125; != &quot;compatible&quot; ]]; then ss_link=&quot;&quot; else if [[ $&#123;obfs_suffix&#125; != &quot;compatible&quot; ]]; then if [[ $&#123;obfs_suffix&#125; = &quot;plain&quot; ]]; then ss_link_qr else ss_link=&quot;&quot; fi else ss_link_qr fi fi fi ssr_link_qr&#125;# 显示 配置信息View_User()&#123; SSR_installation_status Get_IP Get_User now_mode=$(cat &quot;$&#123;config_user_file&#125;&quot;|grep &apos;&quot;port_password&quot;&apos;) [[ -z $&#123;protocol_param&#125; ]] &amp;&amp; protocol_param=&quot;0(无限)&quot; if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then ss_ssr_determine clear &amp;&amp; echo &quot;===================================================&quot; &amp;&amp; echo echo -e &quot; ShadowsocksR账号 配置信息：&quot; &amp;&amp; echo echo -e &quot; I P\\t : $&#123;Green_font_prefix&#125;$&#123;ip&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 端口\\t : $&#123;Green_font_prefix&#125;$&#123;port&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 密码\\t : $&#123;Green_font_prefix&#125;$&#123;password&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 加密\\t : $&#123;Green_font_prefix&#125;$&#123;method&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 协议\\t : $&#123;Red_font_prefix&#125;$&#123;protocol&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 混淆\\t : $&#123;Red_font_prefix&#125;$&#123;obfs&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 设备数限制 : $&#123;Green_font_prefix&#125;$&#123;protocol_param&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 单线程限速 : $&#123;Green_font_prefix&#125;$&#123;speed_limit_per_con&#125; KB/S$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 端口总限速 : $&#123;Green_font_prefix&#125;$&#123;speed_limit_per_user&#125; KB/S$&#123;Font_color_suffix&#125;&quot; echo -e &quot;$&#123;ss_link&#125;&quot; echo -e &quot;$&#123;ssr_link&#125;&quot; echo -e &quot; $&#123;Green_font_prefix&#125; 提示: $&#123;Font_color_suffix&#125; 在浏览器中，打开二维码链接，就可以看到二维码图片。 协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。&quot; echo &amp;&amp; echo &quot;===================================================&quot; else user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | wc -l` [[ $&#123;user_total&#125; = &quot;0&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有发现 多端口用户，请检查 !&quot; &amp;&amp; exit 1 clear &amp;&amp; echo &quot;===================================================&quot; &amp;&amp; echo echo -e &quot; ShadowsocksR账号 配置信息：&quot; &amp;&amp; echo echo -e &quot; I P\\t : $&#123;Green_font_prefix&#125;$&#123;ip&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 加密\\t : $&#123;Green_font_prefix&#125;$&#123;method&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 协议\\t : $&#123;Red_font_prefix&#125;$&#123;protocol&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 混淆\\t : $&#123;Red_font_prefix&#125;$&#123;obfs&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 设备数限制 : $&#123;Green_font_prefix&#125;$&#123;protocol_param&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 单线程限速 : $&#123;Green_font_prefix&#125;$&#123;speed_limit_per_con&#125; KB/S$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 端口总限速 : $&#123;Green_font_prefix&#125;$&#123;speed_limit_per_user&#125; KB/S$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo for((integer = $&#123;user_total&#125;; integer &gt;= 1; integer--)) do port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` password=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $2&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` ss_ssr_determine echo -e $&#123;Separator_1&#125; echo -e &quot; 端口\\t : $&#123;Green_font_prefix&#125;$&#123;port&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot; 密码\\t : $&#123;Green_font_prefix&#125;$&#123;password&#125;$&#123;Font_color_suffix&#125;&quot; echo -e &quot;$&#123;ss_link&#125;&quot; echo -e &quot;$&#123;ssr_link&#125;&quot; done echo -e &quot; $&#123;Green_font_prefix&#125; 提示: $&#123;Font_color_suffix&#125; 在浏览器中，打开二维码链接，就可以看到二维码图片。 协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。&quot; echo &amp;&amp; echo &quot;===================================================&quot; fi&#125;# 设置 配置信息Set_config_port()&#123; while true do echo -e &quot;请输入要设置的ShadowsocksR账号 端口&quot; read -e -p &quot;(默认: 2333):&quot; ssr_port [[ -z &quot;$ssr_port&quot; ]] &amp;&amp; ssr_port=&quot;2333&quot; echo $(($&#123;ssr_port&#125;+0)) &amp;&gt;/dev/null if [[ $? == 0 ]]; then if [[ $&#123;ssr_port&#125; -ge 1 ]] &amp;&amp; [[ $&#123;ssr_port&#125; -le 65535 ]]; then echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 端口 : $&#123;Green_font_prefix&#125;$&#123;ssr_port&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo break else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-65535)&quot; fi else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-65535)&quot; fi done&#125;Set_config_password()&#123; echo &quot;请输入要设置的ShadowsocksR账号 密码&quot; read -e -p &quot;(默认: doub.io):&quot; ssr_password [[ -z &quot;$&#123;ssr_password&#125;&quot; ]] &amp;&amp; ssr_password=&quot;doub.io&quot; echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 密码 : $&#123;Green_font_prefix&#125;$&#123;ssr_password&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo&#125;Set_config_method()&#123; echo -e &quot;请选择要设置的ShadowsocksR账号 加密方式 $&#123;Green_font_prefix&#125; 1.$&#123;Font_color_suffix&#125; none $&#123;Tip&#125; 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain) $&#123;Green_font_prefix&#125; 2.$&#123;Font_color_suffix&#125; rc4 $&#123;Green_font_prefix&#125; 3.$&#123;Font_color_suffix&#125; rc4-md5 $&#123;Green_font_prefix&#125; 4.$&#123;Font_color_suffix&#125; rc4-md5-6 $&#123;Green_font_prefix&#125; 5.$&#123;Font_color_suffix&#125; aes-128-ctr $&#123;Green_font_prefix&#125; 6.$&#123;Font_color_suffix&#125; aes-192-ctr $&#123;Green_font_prefix&#125; 7.$&#123;Font_color_suffix&#125; aes-256-ctr $&#123;Green_font_prefix&#125; 8.$&#123;Font_color_suffix&#125; aes-128-cfb $&#123;Green_font_prefix&#125; 9.$&#123;Font_color_suffix&#125; aes-192-cfb $&#123;Green_font_prefix&#125;10.$&#123;Font_color_suffix&#125; aes-256-cfb $&#123;Green_font_prefix&#125;11.$&#123;Font_color_suffix&#125; aes-128-cfb8 $&#123;Green_font_prefix&#125;12.$&#123;Font_color_suffix&#125; aes-192-cfb8 $&#123;Green_font_prefix&#125;13.$&#123;Font_color_suffix&#125; aes-256-cfb8 $&#123;Green_font_prefix&#125;14.$&#123;Font_color_suffix&#125; salsa20 $&#123;Green_font_prefix&#125;15.$&#123;Font_color_suffix&#125; chacha20 $&#123;Green_font_prefix&#125;16.$&#123;Font_color_suffix&#125; chacha20-ietf $&#123;Tip&#125; salsa20/chacha20-*系列加密方式，需要额外安装依赖 libsodium ，否则会无法启动ShadowsocksR !&quot; &amp;&amp; echo read -e -p &quot;(默认: 5. aes-128-ctr):&quot; ssr_method [[ -z &quot;$&#123;ssr_method&#125;&quot; ]] &amp;&amp; ssr_method=&quot;5&quot; if [[ $&#123;ssr_method&#125; == &quot;1&quot; ]]; then ssr_method=&quot;none&quot; elif [[ $&#123;ssr_method&#125; == &quot;2&quot; ]]; then ssr_method=&quot;rc4&quot; elif [[ $&#123;ssr_method&#125; == &quot;3&quot; ]]; then ssr_method=&quot;rc4-md5&quot; elif [[ $&#123;ssr_method&#125; == &quot;4&quot; ]]; then ssr_method=&quot;rc4-md5-6&quot; elif [[ $&#123;ssr_method&#125; == &quot;5&quot; ]]; then ssr_method=&quot;aes-128-ctr&quot; elif [[ $&#123;ssr_method&#125; == &quot;6&quot; ]]; then ssr_method=&quot;aes-192-ctr&quot; elif [[ $&#123;ssr_method&#125; == &quot;7&quot; ]]; then ssr_method=&quot;aes-256-ctr&quot; elif [[ $&#123;ssr_method&#125; == &quot;8&quot; ]]; then ssr_method=&quot;aes-128-cfb&quot; elif [[ $&#123;ssr_method&#125; == &quot;9&quot; ]]; then ssr_method=&quot;aes-192-cfb&quot; elif [[ $&#123;ssr_method&#125; == &quot;10&quot; ]]; then ssr_method=&quot;aes-256-cfb&quot; elif [[ $&#123;ssr_method&#125; == &quot;11&quot; ]]; then ssr_method=&quot;aes-128-cfb8&quot; elif [[ $&#123;ssr_method&#125; == &quot;12&quot; ]]; then ssr_method=&quot;aes-192-cfb8&quot; elif [[ $&#123;ssr_method&#125; == &quot;13&quot; ]]; then ssr_method=&quot;aes-256-cfb8&quot; elif [[ $&#123;ssr_method&#125; == &quot;14&quot; ]]; then ssr_method=&quot;salsa20&quot; elif [[ $&#123;ssr_method&#125; == &quot;15&quot; ]]; then ssr_method=&quot;chacha20&quot; elif [[ $&#123;ssr_method&#125; == &quot;16&quot; ]]; then ssr_method=&quot;chacha20-ietf&quot; else ssr_method=&quot;aes-128-ctr&quot; fi echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 加密 : $&#123;Green_font_prefix&#125;$&#123;ssr_method&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo&#125;Set_config_protocol()&#123; echo -e &quot;请选择要设置的ShadowsocksR账号 协议插件 $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; origin $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; auth_sha1_v4 $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; auth_aes128_md5 $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; auth_aes128_sha1 $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; auth_chain_a $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; auth_chain_b $&#123;Tip&#125; 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain)&quot; &amp;&amp; echo read -e -p &quot;(默认: 2. auth_sha1_v4):&quot; ssr_protocol [[ -z &quot;$&#123;ssr_protocol&#125;&quot; ]] &amp;&amp; ssr_protocol=&quot;2&quot; if [[ $&#123;ssr_protocol&#125; == &quot;1&quot; ]]; then ssr_protocol=&quot;origin&quot; elif [[ $&#123;ssr_protocol&#125; == &quot;2&quot; ]]; then ssr_protocol=&quot;auth_sha1_v4&quot; elif [[ $&#123;ssr_protocol&#125; == &quot;3&quot; ]]; then ssr_protocol=&quot;auth_aes128_md5&quot; elif [[ $&#123;ssr_protocol&#125; == &quot;4&quot; ]]; then ssr_protocol=&quot;auth_aes128_sha1&quot; elif [[ $&#123;ssr_protocol&#125; == &quot;5&quot; ]]; then ssr_protocol=&quot;auth_chain_a&quot; elif [[ $&#123;ssr_protocol&#125; == &quot;6&quot; ]]; then ssr_protocol=&quot;auth_chain_b&quot; else ssr_protocol=&quot;auth_sha1_v4&quot; fi echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 协议 : $&#123;Green_font_prefix&#125;$&#123;ssr_protocol&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo if [[ $&#123;ssr_protocol&#125; != &quot;origin&quot; ]]; then if [[ $&#123;ssr_protocol&#125; == &quot;auth_sha1_v4&quot; ]]; then read -e -p &quot;是否设置 协议插件兼容原版(_compatible)？[Y/n]&quot; ssr_protocol_yn [[ -z &quot;$&#123;ssr_protocol_yn&#125;&quot; ]] &amp;&amp; ssr_protocol_yn=&quot;y&quot; [[ $ssr_protocol_yn == [Yy] ]] &amp;&amp; ssr_protocol=$&#123;ssr_protocol&#125;&quot;_compatible&quot; echo fi fi&#125;Set_config_obfs()&#123; echo -e &quot;请选择要设置的ShadowsocksR账号 混淆插件 $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; plain $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; http_simple $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; http_post $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; random_head $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; tls1.2_ticket_auth $&#123;Tip&#125; 如果使用 ShadowsocksR 加速游戏，请选择 混淆兼容原版或 plain 混淆，然后客户端选择 plain，否则会增加延迟 ! 另外, 如果你选择了 tls1.2_ticket_auth，那么客户端可以选择 tls1.2_ticket_fastauth，这样即能伪装又不会增加延迟 ! 如果你是在日本、美国等热门地区搭建，那么选择 plain 混淆可能被墙几率更低 !&quot; &amp;&amp; echo read -e -p &quot;(默认: 1. plain):&quot; ssr_obfs [[ -z &quot;$&#123;ssr_obfs&#125;&quot; ]] &amp;&amp; ssr_obfs=&quot;1&quot; if [[ $&#123;ssr_obfs&#125; == &quot;1&quot; ]]; then ssr_obfs=&quot;plain&quot; elif [[ $&#123;ssr_obfs&#125; == &quot;2&quot; ]]; then ssr_obfs=&quot;http_simple&quot; elif [[ $&#123;ssr_obfs&#125; == &quot;3&quot; ]]; then ssr_obfs=&quot;http_post&quot; elif [[ $&#123;ssr_obfs&#125; == &quot;4&quot; ]]; then ssr_obfs=&quot;random_head&quot; elif [[ $&#123;ssr_obfs&#125; == &quot;5&quot; ]]; then ssr_obfs=&quot;tls1.2_ticket_auth&quot; else ssr_obfs=&quot;plain&quot; fi echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 混淆 : $&#123;Green_font_prefix&#125;$&#123;ssr_obfs&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo if [[ $&#123;ssr_obfs&#125; != &quot;plain&quot; ]]; then read -e -p &quot;是否设置 混淆插件兼容原版(_compatible)？[Y/n]&quot; ssr_obfs_yn [[ -z &quot;$&#123;ssr_obfs_yn&#125;&quot; ]] &amp;&amp; ssr_obfs_yn=&quot;y&quot; [[ $ssr_obfs_yn == [Yy] ]] &amp;&amp; ssr_obfs=$&#123;ssr_obfs&#125;&quot;_compatible&quot; echo fi&#125;Set_config_protocol_param()&#123; while true do echo -e &quot;请输入要设置的ShadowsocksR账号 欲限制的设备数 ($&#123;Green_font_prefix&#125; auth_* 系列协议 不兼容原版才有效 $&#123;Font_color_suffix&#125;)&quot; echo -e &quot;$&#123;Tip&#125; 设备数限制：每个端口同一时间能链接的客户端数量(多端口模式，每个端口都是独立计算)，建议最少 2个。&quot; read -e -p &quot;(默认: 无限):&quot; ssr_protocol_param [[ -z &quot;$ssr_protocol_param&quot; ]] &amp;&amp; ssr_protocol_param=&quot;&quot; &amp;&amp; echo &amp;&amp; break echo $(($&#123;ssr_protocol_param&#125;+0)) &amp;&gt;/dev/null if [[ $? == 0 ]]; then if [[ $&#123;ssr_protocol_param&#125; -ge 1 ]] &amp;&amp; [[ $&#123;ssr_protocol_param&#125; -le 9999 ]]; then echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 设备数限制 : $&#123;Green_font_prefix&#125;$&#123;ssr_protocol_param&#125;$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo break else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-9999)&quot; fi else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-9999)&quot; fi done&#125;Set_config_speed_limit_per_con()&#123; while true do echo -e &quot;请输入要设置的每个端口 单线程 限速上限(单位：KB/S)&quot; echo -e &quot;$&#123;Tip&#125; 单线程限速：每个端口 单线程的限速上限，多线程即无效。&quot; read -e -p &quot;(默认: 无限):&quot; ssr_speed_limit_per_con [[ -z &quot;$ssr_speed_limit_per_con&quot; ]] &amp;&amp; ssr_speed_limit_per_con=0 &amp;&amp; echo &amp;&amp; break echo $(($&#123;ssr_speed_limit_per_con&#125;+0)) &amp;&gt;/dev/null if [[ $? == 0 ]]; then if [[ $&#123;ssr_speed_limit_per_con&#125; -ge 1 ]] &amp;&amp; [[ $&#123;ssr_speed_limit_per_con&#125; -le 131072 ]]; then echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 单线程限速 : $&#123;Green_font_prefix&#125;$&#123;ssr_speed_limit_per_con&#125; KB/S$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo break else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-131072)&quot; fi else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-131072)&quot; fi done&#125;Set_config_speed_limit_per_user()&#123; while true do echo echo -e &quot;请输入要设置的每个端口 总速度 限速上限(单位：KB/S)&quot; echo -e &quot;$&#123;Tip&#125; 端口总限速：每个端口 总速度 限速上限，单个端口整体限速。&quot; read -e -p &quot;(默认: 无限):&quot; ssr_speed_limit_per_user [[ -z &quot;$ssr_speed_limit_per_user&quot; ]] &amp;&amp; ssr_speed_limit_per_user=0 &amp;&amp; echo &amp;&amp; break echo $(($&#123;ssr_speed_limit_per_user&#125;+0)) &amp;&gt;/dev/null if [[ $? == 0 ]]; then if [[ $&#123;ssr_speed_limit_per_user&#125; -ge 1 ]] &amp;&amp; [[ $&#123;ssr_speed_limit_per_user&#125; -le 131072 ]]; then echo &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo -e &quot; 端口总限速 : $&#123;Green_font_prefix&#125;$&#123;ssr_speed_limit_per_user&#125; KB/S$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo $&#123;Separator_1&#125; &amp;&amp; echo break else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-131072)&quot; fi else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-131072)&quot; fi done&#125;Set_config_all()&#123; Set_config_port Set_config_password Set_config_method Set_config_protocol Set_config_obfs Set_config_protocol_param Set_config_speed_limit_per_con Set_config_speed_limit_per_user&#125;# 修改 配置信息Modify_config_port()&#123; sed -i &apos;s/&quot;server_port&quot;: &apos;&quot;$(echo $&#123;port&#125;)&quot;&apos;/&quot;server_port&quot;: &apos;&quot;$(echo $&#123;ssr_port&#125;)&quot;&apos;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_password()&#123; sed -i &apos;s/&quot;password&quot;: &quot;&apos;&quot;$(echo $&#123;password&#125;)&quot;&apos;&quot;/&quot;password&quot;: &quot;&apos;&quot;$(echo $&#123;ssr_password&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_method()&#123; sed -i &apos;s/&quot;method&quot;: &quot;&apos;&quot;$(echo $&#123;method&#125;)&quot;&apos;&quot;/&quot;method&quot;: &quot;&apos;&quot;$(echo $&#123;ssr_method&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_protocol()&#123; sed -i &apos;s/&quot;protocol&quot;: &quot;&apos;&quot;$(echo $&#123;protocol&#125;)&quot;&apos;&quot;/&quot;protocol&quot;: &quot;&apos;&quot;$(echo $&#123;ssr_protocol&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_obfs()&#123; sed -i &apos;s/&quot;obfs&quot;: &quot;&apos;&quot;$(echo $&#123;obfs&#125;)&quot;&apos;&quot;/&quot;obfs&quot;: &quot;&apos;&quot;$(echo $&#123;ssr_obfs&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_protocol_param()&#123; sed -i &apos;s/&quot;protocol_param&quot;: &quot;&apos;&quot;$(echo $&#123;protocol_param&#125;)&quot;&apos;&quot;/&quot;protocol_param&quot;: &quot;&apos;&quot;$(echo $&#123;ssr_protocol_param&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_speed_limit_per_con()&#123; sed -i &apos;s/&quot;speed_limit_per_con&quot;: &apos;&quot;$(echo $&#123;speed_limit_per_con&#125;)&quot;&apos;/&quot;speed_limit_per_con&quot;: &apos;&quot;$(echo $&#123;ssr_speed_limit_per_con&#125;)&quot;&apos;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_speed_limit_per_user()&#123; sed -i &apos;s/&quot;speed_limit_per_user&quot;: &apos;&quot;$(echo $&#123;speed_limit_per_user&#125;)&quot;&apos;/&quot;speed_limit_per_user&quot;: &apos;&quot;$(echo $&#123;ssr_speed_limit_per_user&#125;)&quot;&apos;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_connect_verbose_info()&#123; sed -i &apos;s/&quot;connect_verbose_info&quot;: &apos;&quot;$(echo $&#123;connect_verbose_info&#125;)&quot;&apos;/&quot;connect_verbose_info&quot;: &apos;&quot;$(echo $&#123;ssr_connect_verbose_info&#125;)&quot;&apos;/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_all()&#123; Modify_config_port Modify_config_password Modify_config_method Modify_config_protocol Modify_config_obfs Modify_config_protocol_param Modify_config_speed_limit_per_con Modify_config_speed_limit_per_user&#125;Modify_config_port_many()&#123; sed -i &apos;s/&quot;&apos;&quot;$(echo $&#123;port&#125;)&quot;&apos;&quot;:/&quot;&apos;&quot;$(echo $&#123;ssr_port&#125;)&quot;&apos;&quot;:/g&apos; $&#123;config_user_file&#125;&#125;Modify_config_password_many()&#123; sed -i &apos;s/&quot;&apos;&quot;$(echo $&#123;password&#125;)&quot;&apos;&quot;/&quot;&apos;&quot;$(echo $&#123;ssr_password&#125;)&quot;&apos;&quot;/g&apos; $&#123;config_user_file&#125;&#125;# 写入 配置信息Write_configuration()&#123; cat &gt; $&#123;config_user_file&#125;&lt;&lt;-EOF&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;server_port&quot;: $&#123;ssr_port&#125;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;password&quot;: &quot;$&#123;ssr_password&#125;&quot;, &quot;method&quot;: &quot;$&#123;ssr_method&#125;&quot;, &quot;protocol&quot;: &quot;$&#123;ssr_protocol&#125;&quot;, &quot;protocol_param&quot;: &quot;$&#123;ssr_protocol_param&#125;&quot;, &quot;obfs&quot;: &quot;$&#123;ssr_obfs&#125;&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;speed_limit_per_con&quot;: $&#123;ssr_speed_limit_per_con&#125;, &quot;speed_limit_per_user&quot;: $&#123;ssr_speed_limit_per_user&#125;, &quot;additional_ports&quot; : &#123;&#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 0, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false&#125;EOF&#125;Write_configuration_many()&#123; cat &gt; $&#123;config_user_file&#125;&lt;&lt;-EOF&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;port_password&quot;:&#123; &quot;$&#123;ssr_port&#125;&quot;:&quot;$&#123;ssr_password&#125;&quot; &#125;, &quot;method&quot;: &quot;$&#123;ssr_method&#125;&quot;, &quot;protocol&quot;: &quot;$&#123;ssr_protocol&#125;&quot;, &quot;protocol_param&quot;: &quot;$&#123;ssr_protocol_param&#125;&quot;, &quot;obfs&quot;: &quot;$&#123;ssr_obfs&#125;&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;speed_limit_per_con&quot;: $&#123;ssr_speed_limit_per_con&#125;, &quot;speed_limit_per_user&quot;: $&#123;ssr_speed_limit_per_user&#125;, &quot;additional_ports&quot; : &#123;&#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 0, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false&#125;EOF&#125;Check_python()&#123; python_ver=`python -h` if [[ -z $&#123;python_ver&#125; ]]; then echo -e &quot;$&#123;Info&#125; 没有安装Python，开始安装...&quot; if [[ $&#123;release&#125; == &quot;centos&quot; ]]; then yum install -y python else apt-get install -y python fi fi&#125;Centos_yum()&#123; yum update cat /etc/redhat-release |grep 7\\..*|grep -i centos&gt;/dev/null if [[ $? = 0 ]]; then yum install -y vim unzip net-tools else yum install -y vim unzip fi&#125;Debian_apt()&#123; apt-get update cat /etc/issue |grep 9\\..*&gt;/dev/null if [[ $? = 0 ]]; then apt-get install -y vim unzip net-tools else apt-get install -y vim unzip fi&#125;# 下载 ShadowsocksRDownload_SSR()&#123; cd &quot;/usr/local/&quot; wget -N --no-check-certificate &quot;https://github.com/ToyoDAdoubiBackup/shadowsocksr/archive/manyuser.zip&quot; #git config --global http.sslVerify false #env GIT_SSL_NO_VERIFY=true git clone -b manyuser https://github.com/ToyoDAdoubiBackup/shadowsocksr.git #[[ ! -e $&#123;ssr_folder&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR服务端 下载失败 !&quot; &amp;&amp; exit 1 [[ ! -e &quot;manyuser.zip&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR服务端 压缩包 下载失败 !&quot; &amp;&amp; rm -rf manyuser.zip &amp;&amp; exit 1 unzip &quot;manyuser.zip&quot; [[ ! -e &quot;/usr/local/shadowsocksr-manyuser/&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR服务端 解压失败 !&quot; &amp;&amp; rm -rf manyuser.zip &amp;&amp; exit 1 mv &quot;/usr/local/shadowsocksr-manyuser/&quot; &quot;/usr/local/shadowsocksr/&quot; [[ ! -e &quot;/usr/local/shadowsocksr/&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR服务端 重命名失败 !&quot; &amp;&amp; rm -rf manyuser.zip &amp;&amp; rm -rf &quot;/usr/local/shadowsocksr-manyuser/&quot; &amp;&amp; exit 1 rm -rf manyuser.zip [[ -e $&#123;config_folder&#125; ]] &amp;&amp; rm -rf $&#123;config_folder&#125; mkdir $&#123;config_folder&#125; [[ ! -e $&#123;config_folder&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR配置文件的文件夹 建立失败 !&quot; &amp;&amp; exit 1 echo -e &quot;$&#123;Info&#125; ShadowsocksR服务端 下载完成 !&quot;&#125;Service_SSR()&#123; if [[ $&#123;release&#125; = &quot;centos&quot; ]]; then if ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssr_centos -O /etc/init.d/ssr; then echo -e &quot;$&#123;Error&#125; ShadowsocksR服务 管理脚本下载失败 !&quot; &amp;&amp; exit 1 fi chmod +x /etc/init.d/ssr chkconfig --add ssr chkconfig ssr on else if ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssr_debian -O /etc/init.d/ssr; then echo -e &quot;$&#123;Error&#125; ShadowsocksR服务 管理脚本下载失败 !&quot; &amp;&amp; exit 1 fi chmod +x /etc/init.d/ssr update-rc.d -f ssr defaults fi echo -e &quot;$&#123;Info&#125; ShadowsocksR服务 管理脚本下载完成 !&quot;&#125;# 安装 JQ解析器JQ_install()&#123; if [[ ! -e $&#123;jq_file&#125; ]]; then cd &quot;$&#123;ssr_folder&#125;&quot; if [[ $&#123;bit&#125; = &quot;x86_64&quot; ]]; then mv &quot;jq-linux64&quot; &quot;jq&quot; #wget --no-check-certificate &quot;https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64&quot; -O $&#123;jq_file&#125; else mv &quot;jq-linux32&quot; &quot;jq&quot; #wget --no-check-certificate &quot;https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux32&quot; -O $&#123;jq_file&#125; fi [[ ! -e $&#123;jq_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; JQ解析器 重命名失败，请检查 !&quot; &amp;&amp; exit 1 chmod +x $&#123;jq_file&#125; echo -e &quot;$&#123;Info&#125; JQ解析器 安装完成，继续...&quot; else echo -e &quot;$&#123;Info&#125; JQ解析器 已安装，继续...&quot; fi&#125;# 安装 依赖Installation_dependency()&#123; if [[ $&#123;release&#125; == &quot;centos&quot; ]]; then Centos_yum else Debian_apt fi [[ ! -e &quot;/usr/bin/unzip&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 依赖 unzip(解压压缩包) 安装失败，多半是软件包源的问题，请检查 !&quot; &amp;&amp; exit 1 Check_python #echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf #echo &quot;nameserver 8.8.4.4&quot; &gt;&gt; /etc/resolv.conf \\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&#125;Install_SSR()&#123; check_root [[ -e $&#123;config_user_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR 配置文件已存在，请检查( 如安装失败或者存在旧版本，请先卸载 ) !&quot; &amp;&amp; exit 1 [[ -e $&#123;ssr_folder&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR 文件夹已存在，请检查( 如安装失败或者存在旧版本，请先卸载 ) !&quot; &amp;&amp; exit 1 echo -e &quot;$&#123;Info&#125; 开始设置 ShadowsocksR账号配置...&quot; Set_config_all echo -e &quot;$&#123;Info&#125; 开始安装/配置 ShadowsocksR依赖...&quot; Installation_dependency echo -e &quot;$&#123;Info&#125; 开始下载/安装 ShadowsocksR文件...&quot; Download_SSR echo -e &quot;$&#123;Info&#125; 开始下载/安装 ShadowsocksR服务脚本(init)...&quot; Service_SSR echo -e &quot;$&#123;Info&#125; 开始下载/安装 JSNO解析器 JQ...&quot; JQ_install echo -e &quot;$&#123;Info&#125; 开始写入 ShadowsocksR配置文件...&quot; Write_configuration echo -e &quot;$&#123;Info&#125; 开始设置 iptables防火墙...&quot; Set_iptables echo -e &quot;$&#123;Info&#125; 开始添加 iptables防火墙规则...&quot; Add_iptables echo -e &quot;$&#123;Info&#125; 开始保存 iptables防火墙规则...&quot; Save_iptables echo -e &quot;$&#123;Info&#125; 所有步骤 安装完毕，开始启动 ShadowsocksR服务端...&quot; Start_SSR&#125;Update_SSR()&#123; SSR_installation_status echo -e &quot;因破娃暂停更新ShadowsocksR服务端，所以此功能临时禁用。&quot; #cd $&#123;ssr_folder&#125; #git pull #Restart_SSR&#125;Uninstall_SSR()&#123; [[ ! -e $&#123;config_user_file&#125; ]] &amp;&amp; [[ ! -e $&#123;ssr_folder&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有安装 ShadowsocksR，请检查 !&quot; &amp;&amp; exit 1 echo &quot;确定要 卸载ShadowsocksR？[y/N]&quot; &amp;&amp; echo read -e -p &quot;(默认: n):&quot; unyn [[ -z $&#123;unyn&#125; ]] &amp;&amp; unyn=&quot;n&quot; if [[ $&#123;unyn&#125; == [Yy] ]]; then check_pid [[ ! -z &quot;$&#123;PID&#125;&quot; ]] &amp;&amp; kill -9 $&#123;PID&#125; if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` Del_iptables Save_iptables else user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | wc -l` for((integer = 1; integer &lt;= $&#123;user_total&#125;; integer++)) do port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` Del_iptables done Save_iptables fi if [[ $&#123;release&#125; = &quot;centos&quot; ]]; then chkconfig --del ssr else update-rc.d -f ssr remove fi rm -rf $&#123;ssr_folder&#125; &amp;&amp; rm -rf $&#123;config_folder&#125; &amp;&amp; rm -rf /etc/init.d/ssr echo &amp;&amp; echo &quot; ShadowsocksR 卸载完成 !&quot; &amp;&amp; echo else echo &amp;&amp; echo &quot; 卸载已取消...&quot; &amp;&amp; echo fi&#125;Check_Libsodium_ver()&#123; echo -e &quot;$&#123;Info&#125; 开始获取 libsodium 最新版本...&quot; Libsodiumr_ver=$(wget -qO- &quot;https://github.com/jedisct1/libsodium/tags&quot;|grep &quot;/jedisct1/libsodium/releases/tag/&quot;|head -1|sed -r &apos;s/.*tag\\/(.+)\\&quot;&gt;.*/\\1/&apos;) [[ -z $&#123;Libsodiumr_ver&#125; ]] &amp;&amp; Libsodiumr_ver=$&#123;Libsodiumr_ver_backup&#125; echo -e &quot;$&#123;Info&#125; libsodium 最新版本为 $&#123;Green_font_prefix&#125;$&#123;Libsodiumr_ver&#125;$&#123;Font_color_suffix&#125; !&quot;&#125;Install_Libsodium()&#123; if [[ -e $&#123;Libsodiumr_file&#125; ]]; then echo -e &quot;$&#123;Error&#125; libsodium 已安装 , 是否覆盖安装(更新)？[y/N]&quot; read -e -p &quot;(默认: n):&quot; yn [[ -z $&#123;yn&#125; ]] &amp;&amp; yn=&quot;n&quot; if [[ $&#123;yn&#125; == [Nn] ]]; then echo &quot;已取消...&quot; &amp;&amp; exit 1 fi else echo -e &quot;$&#123;Info&#125; libsodium 未安装，开始安装...&quot; fi Check_Libsodium_ver if [[ $&#123;release&#125; == &quot;centos&quot; ]]; then yum update echo -e &quot;$&#123;Info&#125; 安装依赖...&quot; yum -y groupinstall &quot;Development Tools&quot; echo -e &quot;$&#123;Info&#125; 下载...&quot; wget --no-check-certificate -N &quot;https://github.com/jedisct1/libsodium/releases/download/$&#123;Libsodiumr_ver&#125;/libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz&quot; echo -e &quot;$&#123;Info&#125; 解压...&quot; tar -xzf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; cd libsodium-$&#123;Libsodiumr_ver&#125; echo -e &quot;$&#123;Info&#125; 编译安装...&quot; ./configure --disable-maintainer-mode &amp;&amp; make -j2 &amp;&amp; make install echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf else apt-get update echo -e &quot;$&#123;Info&#125; 安装依赖...&quot; apt-get install -y build-essential echo -e &quot;$&#123;Info&#125; 下载...&quot; wget --no-check-certificate -N &quot;https://github.com/jedisct1/libsodium/releases/download/$&#123;Libsodiumr_ver&#125;/libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz&quot; echo -e &quot;$&#123;Info&#125; 解压...&quot; tar -xzf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; cd libsodium-$&#123;Libsodiumr_ver&#125; echo -e &quot;$&#123;Info&#125; 编译安装...&quot; ./configure --disable-maintainer-mode &amp;&amp; make -j2 &amp;&amp; make install fi ldconfig cd .. &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125; [[ ! -e $&#123;Libsodiumr_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; libsodium 安装失败 !&quot; &amp;&amp; exit 1 echo &amp;&amp; echo -e &quot;$&#123;Info&#125; libsodium 安装成功 !&quot; &amp;&amp; echo&#125;# 显示 连接信息debian_View_user_connection_info()&#123; format_1=$1 if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then now_mode=&quot;单端口&quot; &amp;&amp; user_total=&quot;1&quot; IP_total=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; |wc -l` user_port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` user_IP_1=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep &quot;:$&#123;user_port&#125; &quot; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; ` if [[ -z $&#123;user_IP_1&#125; ]]; then user_IP_total=&quot;0&quot; else user_IP_total=`echo -e &quot;$&#123;user_IP_1&#125;&quot;|wc -l` if [[ $&#123;format_1&#125; == &quot;IP_address&quot; ]]; then get_IP_address else user_IP=`echo -e &quot;\\n$&#123;user_IP_1&#125;&quot;` fi fi user_list_all=&quot;端口: $&#123;Green_font_prefix&#125;&quot;$&#123;user_port&#125;&quot;$&#123;Font_color_suffix&#125;\\t 链接IP总数: $&#123;Green_font_prefix&#125;&quot;$&#123;user_IP_total&#125;&quot;$&#123;Font_color_suffix&#125;\\t 当前链接IP: $&#123;Green_font_prefix&#125;$&#123;user_IP&#125;$&#123;Font_color_suffix&#125;\\n&quot; user_IP=&quot;&quot; echo -e &quot;当前模式: $&#123;Green_background_prefix&#125; &quot;$&#123;now_mode&#125;&quot; $&#123;Font_color_suffix&#125; 链接IP总数: $&#123;Green_background_prefix&#125; &quot;$&#123;IP_total&#125;&quot; $&#123;Font_color_suffix&#125;&quot; echo -e &quot;$&#123;user_list_all&#125;&quot; else now_mode=&quot;多端口&quot; &amp;&amp; user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; |sed &apos;$d;1d&apos; | wc -l` IP_total=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; |wc -l` user_list_all=&quot;&quot; for((integer = $&#123;user_total&#125;; integer &gt;= 1; integer--)) do user_port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; |sed &apos;$d;1d&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sed -n &quot;$&#123;integer&#125;p&quot; |sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` user_IP_1=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep &quot;$&#123;user_port&#125;&quot; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot;` if [[ -z $&#123;user_IP_1&#125; ]]; then user_IP_total=&quot;0&quot; else user_IP_total=`echo -e &quot;$&#123;user_IP_1&#125;&quot;|wc -l` if [[ $&#123;format_1&#125; == &quot;IP_address&quot; ]]; then get_IP_address else user_IP=`echo -e &quot;\\n$&#123;user_IP_1&#125;&quot;` fi fi user_list_all=$&#123;user_list_all&#125;&quot;端口: $&#123;Green_font_prefix&#125;&quot;$&#123;user_port&#125;&quot;$&#123;Font_color_suffix&#125;\\t 链接IP总数: $&#123;Green_font_prefix&#125;&quot;$&#123;user_IP_total&#125;&quot;$&#123;Font_color_suffix&#125;\\t 当前链接IP: $&#123;Green_font_prefix&#125;$&#123;user_IP&#125;$&#123;Font_color_suffix&#125;\\n&quot; user_IP=&quot;&quot; done echo -e &quot;当前模式: $&#123;Green_background_prefix&#125; &quot;$&#123;now_mode&#125;&quot; $&#123;Font_color_suffix&#125; 用户总数: $&#123;Green_background_prefix&#125; &quot;$&#123;user_total&#125;&quot; $&#123;Font_color_suffix&#125; 链接IP总数: $&#123;Green_background_prefix&#125; &quot;$&#123;IP_total&#125;&quot; $&#123;Font_color_suffix&#125; &quot; echo -e &quot;$&#123;user_list_all&#125;&quot; fi&#125;centos_View_user_connection_info()&#123; format_1=$1 if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then now_mode=&quot;单端口&quot; &amp;&amp; user_total=&quot;1&quot; IP_total=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp&apos; |grep &apos;::ffff:&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $4&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; |wc -l` user_port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` user_IP_1=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp&apos; |grep &quot;:$&#123;user_port&#125; &quot; | grep &apos;::ffff:&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $4&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot;` if [[ -z $&#123;user_IP_1&#125; ]]; then user_IP_total=&quot;0&quot; else user_IP_total=`echo -e &quot;$&#123;user_IP_1&#125;&quot;|wc -l` if [[ $&#123;format_1&#125; == &quot;IP_address&quot; ]]; then get_IP_address else user_IP=`echo -e &quot;\\n$&#123;user_IP_1&#125;&quot;` fi fi user_list_all=&quot;端口: $&#123;Green_font_prefix&#125;&quot;$&#123;user_port&#125;&quot;$&#123;Font_color_suffix&#125;\\t 链接IP总数: $&#123;Green_font_prefix&#125;&quot;$&#123;user_IP_total&#125;&quot;$&#123;Font_color_suffix&#125;\\t 当前链接IP: $&#123;Green_font_prefix&#125;$&#123;user_IP&#125;$&#123;Font_color_suffix&#125;\\n&quot; user_IP=&quot;&quot; echo -e &quot;当前模式: $&#123;Green_background_prefix&#125; &quot;$&#123;now_mode&#125;&quot; $&#123;Font_color_suffix&#125; 链接IP总数: $&#123;Green_background_prefix&#125; &quot;$&#123;IP_total&#125;&quot; $&#123;Font_color_suffix&#125;&quot; echo -e &quot;$&#123;user_list_all&#125;&quot; else now_mode=&quot;多端口&quot; &amp;&amp; user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; |sed &apos;$d;1d&apos; | wc -l` IP_total=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp&apos; | grep &apos;::ffff:&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $4&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; |wc -l` user_list_all=&quot;&quot; for((integer = 1; integer &lt;= $&#123;user_total&#125;; integer++)) do user_port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; |sed &apos;$d;1d&apos; |awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; |sed -n &quot;$&#123;integer&#125;p&quot; |sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` user_IP_1=`netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp&apos; |grep &quot;$&#123;user_port&#125;&quot;|grep &apos;::ffff:&apos; |awk &apos;&#123;print $5&#125;&apos; |awk -F &quot;:&quot; &apos;&#123;print $4&#125;&apos; |sort -u |grep -E -o &quot;([0-9]&#123;1,3&#125;[\\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot; ` if [[ -z $&#123;user_IP_1&#125; ]]; then user_IP_total=&quot;0&quot; else user_IP_total=`echo -e &quot;$&#123;user_IP_1&#125;&quot;|wc -l` if [[ $&#123;format_1&#125; == &quot;IP_address&quot; ]]; then get_IP_address else user_IP=`echo -e &quot;\\n$&#123;user_IP_1&#125;&quot;` fi fi user_list_all=$&#123;user_list_all&#125;&quot;端口: $&#123;Green_font_prefix&#125;&quot;$&#123;user_port&#125;&quot;$&#123;Font_color_suffix&#125;\\t 链接IP总数: $&#123;Green_font_prefix&#125;&quot;$&#123;user_IP_total&#125;&quot;$&#123;Font_color_suffix&#125;\\t 当前链接IP: $&#123;Green_font_prefix&#125;$&#123;user_IP&#125;$&#123;Font_color_suffix&#125;\\n&quot; user_IP=&quot;&quot; done echo -e &quot;当前模式: $&#123;Green_background_prefix&#125; &quot;$&#123;now_mode&#125;&quot; $&#123;Font_color_suffix&#125; 用户总数: $&#123;Green_background_prefix&#125; &quot;$&#123;user_total&#125;&quot; $&#123;Font_color_suffix&#125; 链接IP总数: $&#123;Green_background_prefix&#125; &quot;$&#123;IP_total&#125;&quot; $&#123;Font_color_suffix&#125; &quot; echo -e &quot;$&#123;user_list_all&#125;&quot; fi&#125;View_user_connection_info()&#123; SSR_installation_status echo &amp;&amp; echo -e &quot;请选择要显示的格式： $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 显示 IP 格式 $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 显示 IP+IP归属地 格式&quot; &amp;&amp; echo read -e -p &quot;(默认: 1):&quot; ssr_connection_info [[ -z &quot;$&#123;ssr_connection_info&#125;&quot; ]] &amp;&amp; ssr_connection_info=&quot;1&quot; if [[ $&#123;ssr_connection_info&#125; == &quot;1&quot; ]]; then View_user_connection_info_1 &quot;&quot; elif [[ $&#123;ssr_connection_info&#125; == &quot;2&quot; ]]; then echo -e &quot;$&#123;Tip&#125; 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...&quot; View_user_connection_info_1 &quot;IP_address&quot; else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-2)&quot; &amp;&amp; exit 1 fi&#125;View_user_connection_info_1()&#123; format=$1 if [[ $&#123;release&#125; = &quot;centos&quot; ]]; then cat /etc/redhat-release |grep 7\\..*|grep -i centos&gt;/dev/null if [[ $? = 0 ]]; then debian_View_user_connection_info &quot;$format&quot; else centos_View_user_connection_info &quot;$format&quot; fi else debian_View_user_connection_info &quot;$format&quot; fi&#125;get_IP_address()&#123; #echo &quot;user_IP_1=$&#123;user_IP_1&#125;&quot; if [[ ! -z $&#123;user_IP_1&#125; ]]; then #echo &quot;user_IP_total=$&#123;user_IP_total&#125;&quot; for((integer_1 = $&#123;user_IP_total&#125;; integer_1 &gt;= 1; integer_1--)) do IP=`echo &quot;$&#123;user_IP_1&#125;&quot; |sed -n &quot;$integer_1&quot;p` #echo &quot;IP=$&#123;IP&#125;&quot; IP_address=`wget -qO- -t1 -T2 http://freeapi.ipip.net/$&#123;IP&#125;|sed &apos;s/\\&quot;//g;s/,//g;s/\\[//g;s/\\]//g&apos;` #echo &quot;IP_address=$&#123;IP_address&#125;&quot; user_IP=&quot;$&#123;user_IP&#125;\\n$&#123;IP&#125;($&#123;IP_address&#125;)&quot; #echo &quot;user_IP=$&#123;user_IP&#125;&quot; sleep 1s done fi&#125;# 修改 用户配置Modify_Config()&#123; SSR_installation_status if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then echo &amp;&amp; echo -e &quot;当前模式: 单端口，你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 修改 用户端口 $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 修改 用户密码 $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 修改 加密方式 $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 修改 协议插件 $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 修改 混淆插件 $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 修改 设备数限制 $&#123;Green_font_prefix&#125;7.$&#123;Font_color_suffix&#125; 修改 单线程限速 $&#123;Green_font_prefix&#125;8.$&#123;Font_color_suffix&#125; 修改 端口总限速 $&#123;Green_font_prefix&#125;9.$&#123;Font_color_suffix&#125; 修改 全部配置&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; ssr_modify [[ -z &quot;$&#123;ssr_modify&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 Get_User if [[ $&#123;ssr_modify&#125; == &quot;1&quot; ]]; then Set_config_port Modify_config_port Add_iptables Del_iptables Save_iptables elif [[ $&#123;ssr_modify&#125; == &quot;2&quot; ]]; then Set_config_password Modify_config_password elif [[ $&#123;ssr_modify&#125; == &quot;3&quot; ]]; then Set_config_method Modify_config_method elif [[ $&#123;ssr_modify&#125; == &quot;4&quot; ]]; then Set_config_protocol Modify_config_protocol elif [[ $&#123;ssr_modify&#125; == &quot;5&quot; ]]; then Set_config_obfs Modify_config_obfs elif [[ $&#123;ssr_modify&#125; == &quot;6&quot; ]]; then Set_config_protocol_param Modify_config_protocol_param elif [[ $&#123;ssr_modify&#125; == &quot;7&quot; ]]; then Set_config_speed_limit_per_con Modify_config_speed_limit_per_con elif [[ $&#123;ssr_modify&#125; == &quot;8&quot; ]]; then Set_config_speed_limit_per_user Modify_config_speed_limit_per_user elif [[ $&#123;ssr_modify&#125; == &quot;9&quot; ]]; then Set_config_all Modify_config_all else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-9)&quot; &amp;&amp; exit 1 fi else echo &amp;&amp; echo -e &quot;当前模式: 多端口，你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 添加 用户配置 $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 删除 用户配置 $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 修改 用户配置—————————— $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 修改 加密方式 $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 修改 协议插件 $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 修改 混淆插件 $&#123;Green_font_prefix&#125;7.$&#123;Font_color_suffix&#125; 修改 设备数限制 $&#123;Green_font_prefix&#125;8.$&#123;Font_color_suffix&#125; 修改 单线程限速 $&#123;Green_font_prefix&#125;9.$&#123;Font_color_suffix&#125; 修改 端口总限速 $&#123;Green_font_prefix&#125;10.$&#123;Font_color_suffix&#125; 修改 全部配置&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; ssr_modify [[ -z &quot;$&#123;ssr_modify&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 Get_User if [[ $&#123;ssr_modify&#125; == &quot;1&quot; ]]; then Add_multi_port_user elif [[ $&#123;ssr_modify&#125; == &quot;2&quot; ]]; then Del_multi_port_user elif [[ $&#123;ssr_modify&#125; == &quot;3&quot; ]]; then Modify_multi_port_user elif [[ $&#123;ssr_modify&#125; == &quot;4&quot; ]]; then Set_config_method Modify_config_method elif [[ $&#123;ssr_modify&#125; == &quot;5&quot; ]]; then Set_config_protocol Modify_config_protocol elif [[ $&#123;ssr_modify&#125; == &quot;6&quot; ]]; then Set_config_obfs Modify_config_obfs elif [[ $&#123;ssr_modify&#125; == &quot;7&quot; ]]; then Set_config_protocol_param Modify_config_protocol_param elif [[ $&#123;ssr_modify&#125; == &quot;8&quot; ]]; then Set_config_speed_limit_per_con Modify_config_speed_limit_per_con elif [[ $&#123;ssr_modify&#125; == &quot;9&quot; ]]; then Set_config_speed_limit_per_user Modify_config_speed_limit_per_user elif [[ $&#123;ssr_modify&#125; == &quot;10&quot; ]]; then Set_config_method Set_config_protocol Set_config_obfs Set_config_protocol_param Set_config_speed_limit_per_con Set_config_speed_limit_per_user Modify_config_method Modify_config_protocol Modify_config_obfs Modify_config_protocol_param Modify_config_speed_limit_per_con Modify_config_speed_limit_per_user else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-9)&quot; &amp;&amp; exit 1 fi fi Restart_SSR&#125;# 显示 多端口用户配置List_multi_port_user()&#123; user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | wc -l` [[ $&#123;user_total&#125; = &quot;0&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 没有发现 多端口用户，请检查 !&quot; &amp;&amp; exit 1 user_list_all=&quot;&quot; for((integer = $&#123;user_total&#125;; integer &gt;= 1; integer--)) do user_port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` user_password=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $2&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` user_list_all=$&#123;user_list_all&#125;&quot;端口: &quot;$&#123;user_port&#125;&quot; 密码: &quot;$&#123;user_password&#125;&quot;\\n&quot; done echo &amp;&amp; echo -e &quot;用户总数 $&#123;Green_font_prefix&#125;&quot;$&#123;user_total&#125;&quot;$&#123;Font_color_suffix&#125;&quot; echo -e $&#123;user_list_all&#125;&#125;# 添加 多端口用户配置Add_multi_port_user()&#123; Set_config_port Set_config_password sed -i &quot;8 i \\&quot; \\&quot;$&#123;ssr_port&#125;\\&quot;:\\&quot;$&#123;ssr_password&#125;\\&quot;,&quot; $&#123;config_user_file&#125; sed -i &quot;8s/^\\&quot;//&quot; $&#123;config_user_file&#125; Add_iptables Save_iptables echo -e &quot;$&#123;Info&#125; 多端口用户添加完成 $&#123;Green_font_prefix&#125;[端口: $&#123;ssr_port&#125; , 密码: $&#123;ssr_password&#125;]$&#123;Font_color_suffix&#125; &quot;&#125;# 修改 多端口用户配置Modify_multi_port_user()&#123; List_multi_port_user echo &amp;&amp; echo -e &quot;请输入要修改的用户端口&quot; read -e -p &quot;(默认: 取消):&quot; modify_user_port [[ -z &quot;$&#123;modify_user_port&#125;&quot; ]] &amp;&amp; echo -e &quot;已取消...&quot; &amp;&amp; exit 1 del_user=`cat $&#123;config_user_file&#125;|grep &apos;&quot;&apos;&quot;$&#123;modify_user_port&#125;&quot;&apos;&quot;&apos;` if [[ ! -z &quot;$&#123;del_user&#125;&quot; ]]; then port=&quot;$&#123;modify_user_port&#125;&quot; password=`echo -e $&#123;del_user&#125;|awk -F &quot;:&quot; &apos;&#123;print $NF&#125;&apos;|sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` Set_config_port Set_config_password sed -i &apos;s/&quot;&apos;$(echo $&#123;port&#125;)&apos;&quot;:&quot;&apos;$(echo $&#123;password&#125;)&apos;&quot;/&quot;&apos;$(echo $&#123;ssr_port&#125;)&apos;&quot;:&quot;&apos;$(echo $&#123;ssr_password&#125;)&apos;&quot;/g&apos; $&#123;config_user_file&#125; Del_iptables Add_iptables Save_iptables echo -e &quot;$&#123;Inof&#125; 多端口用户修改完成 $&#123;Green_font_prefix&#125;[旧: $&#123;modify_user_port&#125; $&#123;password&#125; , 新: $&#123;ssr_port&#125; $&#123;ssr_password&#125;]$&#123;Font_color_suffix&#125; &quot; else echo -e &quot;$&#123;Error&#125; 请输入正确的端口 !&quot; &amp;&amp; exit 1 fi&#125;# 删除 多端口用户配置Del_multi_port_user()&#123; List_multi_port_user user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | wc -l` [[ &quot;$&#123;user_total&#125;&quot; = &quot;1&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 多端口用户仅剩 1个，不能删除 !&quot; &amp;&amp; exit 1 echo -e &quot;请输入要删除的用户端口&quot; read -e -p &quot;(默认: 取消):&quot; del_user_port [[ -z &quot;$&#123;del_user_port&#125;&quot; ]] &amp;&amp; echo -e &quot;已取消...&quot; &amp;&amp; exit 1 del_user=`cat $&#123;config_user_file&#125;|grep &apos;&quot;&apos;&quot;$&#123;del_user_port&#125;&quot;&apos;&quot;&apos;` if [[ ! -z $&#123;del_user&#125; ]]; then port=$&#123;del_user_port&#125; Del_iptables Save_iptables del_user_determine=`echo $&#123;del_user:(($&#123;#del_user&#125; - 1))&#125;` if [[ $&#123;del_user_determine&#125; != &quot;,&quot; ]]; then del_user_num=$(sed -n -e &quot;/$&#123;port&#125;/=&quot; $&#123;config_user_file&#125;) echo $(($&#123;ssr_protocol_param&#125;+0)) &amp;&gt;/dev/null del_user_num=$(echo $(($&#123;del_user_num&#125;-1))) sed -i &quot;$&#123;del_user_num&#125;s/,//g&quot; $&#123;config_user_file&#125; fi sed -i &quot;/$&#123;port&#125;/d&quot; $&#123;config_user_file&#125; echo -e &quot;$&#123;Info&#125; 多端口用户删除完成 $&#123;Green_font_prefix&#125; $&#123;del_user_port&#125; $&#123;Font_color_suffix&#125; &quot; else echo &quot;$&#123;Error&#125; 请输入正确的端口 !&quot; &amp;&amp; exit 1 fi&#125;# 手动修改 用户配置Manually_Modify_Config()&#123; SSR_installation_status port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` vi $&#123;config_user_file&#125; if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then ssr_port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` Del_iptables Add_iptables fi Restart_SSR&#125;# 切换端口模式Port_mode_switching()&#123; SSR_installation_status if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then echo &amp;&amp; echo -e &quot; 当前模式: $&#123;Green_font_prefix&#125;单端口$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo echo -e &quot;确定要切换为 多端口模式？[y/N]&quot; read -e -p &quot;(默认: n):&quot; mode_yn [[ -z $&#123;mode_yn&#125; ]] &amp;&amp; mode_yn=&quot;n&quot; if [[ $&#123;mode_yn&#125; == [Yy] ]]; then port=`$&#123;jq_file&#125; &apos;.server_port&apos; $&#123;config_user_file&#125;` Set_config_all Write_configuration_many Del_iptables Add_iptables Save_iptables Restart_SSR else echo &amp;&amp; echo &quot; 已取消...&quot; &amp;&amp; echo fi else echo &amp;&amp; echo -e &quot; 当前模式: $&#123;Green_font_prefix&#125;多端口$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo echo -e &quot;确定要切换为 单端口模式？[y/N]&quot; read -e -p &quot;(默认: n):&quot; mode_yn [[ -z $&#123;mode_yn&#125; ]] &amp;&amp; mode_yn=&quot;n&quot; if [[ $&#123;mode_yn&#125; == [Yy] ]]; then user_total=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | wc -l` for((integer = 1; integer &lt;= $&#123;user_total&#125;; integer++)) do port=`$&#123;jq_file&#125; &apos;.port_password&apos; $&#123;config_user_file&#125; | sed &apos;$d&apos; | sed &quot;1d&quot; | awk -F &quot;:&quot; &apos;&#123;print $1&#125;&apos; | sed -n &quot;$&#123;integer&#125;p&quot; | sed -r &apos;s/.*\\&quot;(.+)\\&quot;.*/\\1/&apos;` Del_iptables done Set_config_all Write_configuration Add_iptables Restart_SSR else echo &amp;&amp; echo &quot; 已取消...&quot; &amp;&amp; echo fi fi&#125;Start_SSR()&#123; SSR_installation_status check_pid [[ ! -z $&#123;PID&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR 正在运行 !&quot; &amp;&amp; exit 1 /etc/init.d/ssr start check_pid [[ ! -z $&#123;PID&#125; ]] &amp;&amp; View_User&#125;Stop_SSR()&#123; SSR_installation_status check_pid [[ -z $&#123;PID&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR 未运行 !&quot; &amp;&amp; exit 1 /etc/init.d/ssr stop&#125;Restart_SSR()&#123; SSR_installation_status check_pid [[ ! -z $&#123;PID&#125; ]] &amp;&amp; /etc/init.d/ssr stop /etc/init.d/ssr start check_pid [[ ! -z $&#123;PID&#125; ]] &amp;&amp; View_User&#125;View_Log()&#123; SSR_installation_status [[ ! -e $&#123;ssr_log_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; ShadowsocksR日志文件不存在 !&quot; &amp;&amp; exit 1 echo &amp;&amp; echo -e &quot;$&#123;Tip&#125; 按 $&#123;Red_font_prefix&#125;Ctrl+C$&#123;Font_color_suffix&#125; 终止查看日志&quot; &amp;&amp; echo -e &quot;如果需要查看完整日志内容，请用 $&#123;Red_font_prefix&#125;cat $&#123;ssr_log_file&#125;$&#123;Font_color_suffix&#125; 命令。&quot; &amp;&amp; echo tail -f $&#123;ssr_log_file&#125;&#125;# 锐速Configure_Server_Speeder()&#123; echo &amp;&amp; echo -e &quot;你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 安装 锐速 $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 卸载 锐速———————— $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 启动 锐速 $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 停止 锐速 $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 重启 锐速 $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 查看 锐速 状态 注意： 锐速和LotServer不能同时安装/启动！&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; server_speeder_num [[ -z &quot;$&#123;server_speeder_num&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;server_speeder_num&#125; == &quot;1&quot; ]]; then Install_ServerSpeeder elif [[ $&#123;server_speeder_num&#125; == &quot;2&quot; ]]; then Server_Speeder_installation_status Uninstall_ServerSpeeder elif [[ $&#123;server_speeder_num&#125; == &quot;3&quot; ]]; then Server_Speeder_installation_status $&#123;Server_Speeder_file&#125; start $&#123;Server_Speeder_file&#125; status elif [[ $&#123;server_speeder_num&#125; == &quot;4&quot; ]]; then Server_Speeder_installation_status $&#123;Server_Speeder_file&#125; stop elif [[ $&#123;server_speeder_num&#125; == &quot;5&quot; ]]; then Server_Speeder_installation_status $&#123;Server_Speeder_file&#125; restart $&#123;Server_Speeder_file&#125; status elif [[ $&#123;server_speeder_num&#125; == &quot;6&quot; ]]; then Server_Speeder_installation_status $&#123;Server_Speeder_file&#125; status else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-6)&quot; &amp;&amp; exit 1 fi&#125;Install_ServerSpeeder()&#123; [[ -e $&#123;Server_Speeder_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 锐速(Server Speeder) 已安装 !&quot; &amp;&amp; exit 1 cd /root #借用91yun.rog的开心版锐速 wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder.sh [[ ! -e &quot;serverspeeder.sh&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 锐速安装脚本下载失败 !&quot; &amp;&amp; exit 1 bash serverspeeder.sh sleep 2s PID=`ps -ef |grep -v grep |grep &quot;serverspeeder&quot; |awk &apos;&#123;print $2&#125;&apos;` if [[ ! -z $&#123;PID&#125; ]]; then rm -rf /root/serverspeeder.sh rm -rf /root/91yunserverspeeder rm -rf /root/91yunserverspeeder.tar.gz echo -e &quot;$&#123;Info&#125; 锐速(Server Speeder) 安装完成 !&quot; &amp;&amp; exit 1 else echo -e &quot;$&#123;Error&#125; 锐速(Server Speeder) 安装失败 !&quot; &amp;&amp; exit 1 fi&#125;Uninstall_ServerSpeeder()&#123; echo &quot;确定要卸载 锐速(Server Speeder)？[y/N]&quot; &amp;&amp; echo read -e -p &quot;(默认: n):&quot; unyn [[ -z $&#123;unyn&#125; ]] &amp;&amp; echo &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;unyn&#125; == [Yy] ]]; then chattr -i /serverspeeder/etc/apx* /serverspeeder/bin/serverSpeeder.sh uninstall -f echo &amp;&amp; echo &quot;锐速(Server Speeder) 卸载完成 !&quot; &amp;&amp; echo fi&#125;# LotServerConfigure_LotServer()&#123; echo &amp;&amp; echo -e &quot;你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 安装 LotServer $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 卸载 LotServer———————— $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 启动 LotServer $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 停止 LotServer $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 重启 LotServer $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 查看 LotServer 状态 注意： 锐速和LotServer不能同时安装/启动！&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; lotserver_num [[ -z &quot;$&#123;lotserver_num&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;lotserver_num&#125; == &quot;1&quot; ]]; then Install_LotServer elif [[ $&#123;lotserver_num&#125; == &quot;2&quot; ]]; then LotServer_installation_status Uninstall_LotServer elif [[ $&#123;lotserver_num&#125; == &quot;3&quot; ]]; then LotServer_installation_status $&#123;LotServer_file&#125; start $&#123;LotServer_file&#125; status elif [[ $&#123;lotserver_num&#125; == &quot;4&quot; ]]; then LotServer_installation_status $&#123;LotServer_file&#125; stop elif [[ $&#123;lotserver_num&#125; == &quot;5&quot; ]]; then LotServer_installation_status $&#123;LotServer_file&#125; restart $&#123;LotServer_file&#125; status elif [[ $&#123;lotserver_num&#125; == &quot;6&quot; ]]; then LotServer_installation_status $&#123;LotServer_file&#125; status else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-6)&quot; &amp;&amp; exit 1 fi&#125;Install_LotServer()&#123; [[ -e $&#123;LotServer_file&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; LotServer 已安装 !&quot; &amp;&amp; exit 1 #Github: https://github.com/0oVicero0/serverSpeeder_Install wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; [[ ! -e &quot;/tmp/appex.sh&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; LotServer 安装脚本下载失败 !&quot; &amp;&amp; exit 1 bash /tmp/appex.sh &apos;install&apos; sleep 2s PID=`ps -ef |grep -v grep |grep &quot;appex&quot; |awk &apos;&#123;print $2&#125;&apos;` if [[ ! -z $&#123;PID&#125; ]]; then echo -e &quot;$&#123;Info&#125; LotServer 安装完成 !&quot; &amp;&amp; exit 1 else echo -e &quot;$&#123;Error&#125; LotServer 安装失败 !&quot; &amp;&amp; exit 1 fi&#125;Uninstall_LotServer()&#123; echo &quot;确定要卸载 LotServer？[y/N]&quot; &amp;&amp; echo read -e -p &quot;(默认: n):&quot; unyn [[ -z $&#123;unyn&#125; ]] &amp;&amp; echo &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;unyn&#125; == [Yy] ]]; then wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &apos;uninstall&apos; echo &amp;&amp; echo &quot;LotServer 卸载完成 !&quot; &amp;&amp; echo fi&#125;# BBRConfigure_BBR()&#123; echo &amp;&amp; echo -e &quot; 你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 安装 BBR———————— $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 启动 BBR $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 停止 BBR $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 查看 BBR 状态&quot; &amp;&amp; echoecho -e &quot;$&#123;Green_font_prefix&#125; [安装前 请注意] $&#123;Font_color_suffix&#125;1. 安装开启BBR，需要更换内核，存在更换失败等风险(重启后无法开机)2. 本脚本仅支持 Debian / Ubuntu 系统更换内核，OpenVZ和Docker 不支持更换内核3. Debian 更换内核过程中会提示 [ 是否终止卸载内核 ] ，请选择 $&#123;Green_font_prefix&#125; NO $&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; bbr_num [[ -z &quot;$&#123;bbr_num&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;bbr_num&#125; == &quot;1&quot; ]]; then Install_BBR elif [[ $&#123;bbr_num&#125; == &quot;2&quot; ]]; then Start_BBR elif [[ $&#123;bbr_num&#125; == &quot;3&quot; ]]; then Stop_BBR elif [[ $&#123;bbr_num&#125; == &quot;4&quot; ]]; then Status_BBR else echo -e &quot;$&#123;Error&#125; 请输入正确的数字(1-4)&quot; &amp;&amp; exit 1 fi&#125;Install_BBR()&#123; [[ $&#123;release&#125; = &quot;centos&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 本脚本不支持 CentOS系统安装 BBR !&quot; &amp;&amp; exit 1 BBR_installation_status bash &quot;$&#123;BBR_file&#125;&quot;&#125;Start_BBR()&#123; BBR_installation_status bash &quot;$&#123;BBR_file&#125;&quot; start&#125;Stop_BBR()&#123; BBR_installation_status bash &quot;$&#123;BBR_file&#125;&quot; stop&#125;Status_BBR()&#123; BBR_installation_status bash &quot;$&#123;BBR_file&#125;&quot; status&#125;# 其他功能Other_functions()&#123; echo &amp;&amp; echo -e &quot; 你要做什么？ $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 配置 BBR $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 配置 锐速(ServerSpeeder) $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 配置 LotServer(锐速母公司) 注意： 锐速/LotServer/BBR 不支持 OpenVZ！ 注意： 锐速/LotServer/BBR 不能共存！———————————— $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 一键封禁 BT/PT/SPAM (iptables) $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 一键解封 BT/PT/SPAM (iptables) $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 切换 ShadowsocksR日志输出模式 ——说明：SSR默认只输出错误日志，此项可切换为输出详细的访问日志&quot; &amp;&amp; echo read -e -p &quot;(默认: 取消):&quot; other_num [[ -z &quot;$&#123;other_num&#125;&quot; ]] &amp;&amp; echo &quot;已取消...&quot; &amp;&amp; exit 1 if [[ $&#123;other_num&#125; == &quot;1&quot; ]]; then Configure_BBR elif [[ $&#123;other_num&#125; == &quot;2&quot; ]]; then Configure_Server_Speeder elif [[ $&#123;other_num&#125; == &quot;3&quot; ]]; then Configure_LotServer elif [[ $&#123;other_num&#125; == &quot;4&quot; ]]; then BanBTPTSPAM elif [[ $&#123;other_num&#125; == &quot;5&quot; ]]; then UnBanBTPTSPAM elif [[ $&#123;other_num&#125; == &quot;6&quot; ]]; then Set_config_connect_verbose_info else echo -e &quot;$&#123;Error&#125; 请输入正确的数字 [1-6]&quot; &amp;&amp; exit 1 fi&#125;# 封禁 BT PT SPAMBanBTPTSPAM()&#123; wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh &amp;&amp; chmod +x ban_iptables.sh &amp;&amp; bash ban_iptables.sh banall rm -rf ban_iptables.sh&#125;# 解封 BT PT SPAMUnBanBTPTSPAM()&#123; wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh &amp;&amp; chmod +x ban_iptables.sh &amp;&amp; bash ban_iptables.sh unbanall rm -rf ban_iptables.sh&#125;Set_config_connect_verbose_info()&#123; SSR_installation_status Get_User if [[ $&#123;connect_verbose_info&#125; = &quot;0&quot; ]]; then echo &amp;&amp; echo -e &quot;当前日志模式: $&#123;Green_font_prefix&#125;简单模式（只输出错误日志）$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo echo -e &quot;确定要切换为 $&#123;Green_font_prefix&#125;详细模式（输出详细连接日志+错误日志）$&#123;Font_color_suffix&#125;？[y/N]&quot; read -e -p &quot;(默认: n):&quot; connect_verbose_info_ny [[ -z &quot;$&#123;connect_verbose_info_ny&#125;&quot; ]] &amp;&amp; connect_verbose_info_ny=&quot;n&quot; if [[ $&#123;connect_verbose_info_ny&#125; == [Yy] ]]; then ssr_connect_verbose_info=&quot;1&quot; Modify_config_connect_verbose_info Restart_SSR else echo &amp;&amp; echo &quot; 已取消...&quot; &amp;&amp; echo fi else echo &amp;&amp; echo -e &quot;当前日志模式: $&#123;Green_font_prefix&#125;详细模式（输出详细连接日志+错误日志）$&#123;Font_color_suffix&#125;&quot; &amp;&amp; echo echo -e &quot;确定要切换为 $&#123;Green_font_prefix&#125;简单模式（只输出错误日志）$&#123;Font_color_suffix&#125;？[y/N]&quot; read -e -p &quot;(默认: n):&quot; connect_verbose_info_ny [[ -z &quot;$&#123;connect_verbose_info_ny&#125;&quot; ]] &amp;&amp; connect_verbose_info_ny=&quot;n&quot; if [[ $&#123;connect_verbose_info_ny&#125; == [Yy] ]]; then ssr_connect_verbose_info=&quot;0&quot; Modify_config_connect_verbose_info Restart_SSR else echo &amp;&amp; echo &quot; 已取消...&quot; &amp;&amp; echo fi fi&#125;Update_Shell()&#123; sh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 &quot;https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh&quot;|grep &apos;sh_ver=&quot;&apos;|awk -F &quot;=&quot; &apos;&#123;print $NF&#125;&apos;|sed &apos;s/\\&quot;//g&apos;|head -1) &amp;&amp; sh_new_type=&quot;github&quot; [[ -z $&#123;sh_new_ver&#125; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 无法链接到 Github !&quot; &amp;&amp; exit 0 if [[ -e &quot;/etc/init.d/ssr&quot; ]]; then rm -rf /etc/init.d/ssr Service_SSR fi wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh&quot; &amp;&amp; chmod +x ssr.sh echo -e &quot;脚本已更新为最新版本[ $&#123;sh_new_ver&#125; ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)&quot; &amp;&amp; exit 0&#125;# 显示 菜单状态menu_status()&#123; if [[ -e $&#123;config_user_file&#125; ]]; then check_pid if [[ ! -z &quot;$&#123;PID&#125;&quot; ]]; then echo -e &quot; 当前状态: $&#123;Green_font_prefix&#125;已安装$&#123;Font_color_suffix&#125; 并 $&#123;Green_font_prefix&#125;已启动$&#123;Font_color_suffix&#125;&quot; else echo -e &quot; 当前状态: $&#123;Green_font_prefix&#125;已安装$&#123;Font_color_suffix&#125; 但 $&#123;Red_font_prefix&#125;未启动$&#123;Font_color_suffix&#125;&quot; fi now_mode=$(cat &quot;$&#123;config_user_file&#125;&quot;|grep &apos;&quot;port_password&quot;&apos;) if [[ -z &quot;$&#123;now_mode&#125;&quot; ]]; then echo -e &quot; 当前模式: $&#123;Green_font_prefix&#125;单端口$&#123;Font_color_suffix&#125;&quot; else echo -e &quot; 当前模式: $&#123;Green_font_prefix&#125;多端口$&#123;Font_color_suffix&#125;&quot; fi else echo -e &quot; 当前状态: $&#123;Red_font_prefix&#125;未安装$&#123;Font_color_suffix&#125;&quot; fi&#125;check_sys[[ $&#123;release&#125; != &quot;debian&quot; ]] &amp;&amp; [[ $&#123;release&#125; != &quot;ubuntu&quot; ]] &amp;&amp; [[ $&#123;release&#125; != &quot;centos&quot; ]] &amp;&amp; echo -e &quot;$&#123;Error&#125; 本脚本不支持当前系统 $&#123;release&#125; !&quot; &amp;&amp; exit 1echo -e &quot; ShadowsocksR 一键管理脚本 $&#123;Red_font_prefix&#125;[v$&#123;sh_ver&#125;]$&#123;Font_color_suffix&#125; ---- Toyo | doub.io/ss-jc42 ---- $&#123;Green_font_prefix&#125;1.$&#123;Font_color_suffix&#125; 安装 ShadowsocksR $&#123;Green_font_prefix&#125;2.$&#123;Font_color_suffix&#125; 更新 ShadowsocksR $&#123;Green_font_prefix&#125;3.$&#123;Font_color_suffix&#125; 卸载 ShadowsocksR $&#123;Green_font_prefix&#125;4.$&#123;Font_color_suffix&#125; 安装 libsodium(chacha20)———————————— $&#123;Green_font_prefix&#125;5.$&#123;Font_color_suffix&#125; 查看 账号信息 $&#123;Green_font_prefix&#125;6.$&#123;Font_color_suffix&#125; 显示 连接信息 $&#123;Green_font_prefix&#125;7.$&#123;Font_color_suffix&#125; 设置 用户配置 $&#123;Green_font_prefix&#125;8.$&#123;Font_color_suffix&#125; 手动 修改配置 $&#123;Green_font_prefix&#125;9.$&#123;Font_color_suffix&#125; 切换 端口模式———————————— $&#123;Green_font_prefix&#125;10.$&#123;Font_color_suffix&#125; 启动 ShadowsocksR $&#123;Green_font_prefix&#125;11.$&#123;Font_color_suffix&#125; 停止 ShadowsocksR $&#123;Green_font_prefix&#125;12.$&#123;Font_color_suffix&#125; 重启 ShadowsocksR $&#123;Green_font_prefix&#125;13.$&#123;Font_color_suffix&#125; 查看 ShadowsocksR 日志———————————— $&#123;Green_font_prefix&#125;14.$&#123;Font_color_suffix&#125; 其他功能 $&#123;Green_font_prefix&#125;15.$&#123;Font_color_suffix&#125; 升级脚本 &quot;menu_statusecho &amp;&amp; read -e -p &quot;请输入数字 [1-15]：&quot; numcase &quot;$num&quot; in 1) Install_SSR ;; 2) Update_SSR ;; 3) Uninstall_SSR ;; 4) Install_Libsodium ;; 5) View_User ;; 6) View_user_connection_info ;; 7) Modify_Config ;; 8) Manually_Modify_Config ;; 9) Port_mode_switching ;; 10) Start_SSR ;; 11) Stop_SSR ;; 12) Restart_SSR ;; 13) View_Log ;; 14) Other_functions ;; 15) Update_Shell ;; *) echo -e &quot;$&#123;Error&#125; 请输入正确的数字 [1-15]&quot; ;;esac","categories":[{"name":"兴趣爱好","slug":"兴趣爱好","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/"},{"name":"其他","slug":"兴趣爱好/其他","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"vpn","slug":"vpn","permalink":"http://cynen.github.io/tags/vpn/"}]},{"title":"Docker搭建FastDFS","slug":"Docker搭建FastDFS","date":"2019-11-24T10:13:40.000Z","updated":"2019-11-24T13:26:59.529Z","comments":true,"path":"2019/11/24/Docker搭建FastDFS/","link":"","permalink":"http://cynen.github.io/2019/11/24/Docker%E6%90%AD%E5%BB%BAFastDFS/","excerpt":"","text":"简介此篇是docker部署fastdfs教程,针对具有一定的docker容器基础的. FastDFS架构:服务端两个角色：Tracker：管理集群，tracker 也可以实现集群。每个 tracker 节点地位平等。收集 Storage 集群的状态。Storage：实际保存文件 Storage 分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。 文件上传及下载的流程文件上传流程文件上传：客户端链接到Server之后，可以从Server端获取到Storage的ip和port，然后将指定的文件通过storage的服务端口上传。 【此处使用的是配置文件中的 port=23000 还是http.server_port=8888】上传完成后,回传对应的文件的id. 客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。 组名：[group1/M00]文件上传后所在的 storage 组名称，在文件上传成功后有 storage 服务器返回，需要客户端自行保存。虚拟磁盘路径：storage 配置的虚拟路径，与磁盘选项 store_path*对应。如果配置了store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推。 [02/44/]数据两级目录：storage 服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。 [一长串]文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。 文件下载流程文件上传完成后,进行文件下载的时候,指定的是file_id.客户端链接到Server,获取到指定文件存储的文件信息,重定向请求到Storage服务器上,由于Storage服务器上无法提供文件服务,因此,此请求需要通过nginx做代理,将静态文件传递回给客户端. Docker部署FastDFSOK,上面大致讲解了一下FastDFS的基础架构,现在准备来进行搭建吧.由于直接在linux上进行搭建比较繁琐[具体搭建方法百度一下],因此,我这里采取我比较熟悉的Docker容器进行搭建.顺便记录一下搭建过程中遇到的一些问题和注意事项. 搭建参考: docker搭建fastdfs 关键几步：1、使用docker镜像构建tracker（跟踪服务器，起到调度的作用）： 1docker run -d --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker 说明:--network=host 指定此容器运行使用的是host网络模式,也就是和宿主机共用物理网卡.占用的端口也就是物理机的端口.非常重要!!tracker 最后一定要指定一下,启动的容器是 tracker还是storage.-v 目录映射,就是为了将容器内的目录,文件映射到宿主机上,方便修改. 2、使用docker镜像构建storage实际的执行存储和读取文件的服务器 1234docker run -d --network=host --name storage \\-e TRACKER_SERVER=ip:22122 \\-v /var/fdfs/storage:/var/fdfs \\-e GROUP_NAME=group1 delron/fastdfs storage storage 最后面的一个storage一定要指定一下.-e TRACKER_SERVER=ip:22122 指定tracker服务器的地址和端口号. (所以,22122是可以换的)-e GROUP_NAME=group1指定当前的组名称 3、部署完成后，对服务器进行配置【都是在storage容器内部操作】 1、进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在/etc/fdfs目录下的storage.conf。 vim /etc/fdfs/storage.confStorage 的服务端口： 2、配置nginx，在/usr/local/nginx/conf目录下，修改nginx.conf文件cat /usr/local/nginx/conf/nginx.conf 修改Nginx的配置： 【默认配置如下】 可以这么修改： 【好像也可以不用配置。。。我使用的是默认配置.】 123location /group1/M00 &#123; alias /var/fdfs;&#125; 安装完成后进行 测试：【storage容器内部操作】由于已经将目录挂载到主机了。所以，我们直接给主机的挂载目录上传一张图片。 【这个。。。自己想办法吧,实在不行就 wget吧】这个是我传上去的一张照片，此时并没有被fastDFS管理！！！上传指令： 【需要正确的1.jpg的路径。】进入到/var/fdfs/目录下,查看是否存在图片文件.在图片目录下执行一下命令: 1/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 1.jpg 上传成功后,会返回文件的id: OK，在浏览器，直接访问：http://{storage主机ip}:8888/group1/M00/00/00/rBAINlzw74qAWgPgAAS9dM2zyF4598.jpg即可看到对应的图片. Storage中的配置文件：我们来看一下一共使用了很多端口: 【Storage容器内操作】 123456789101112131415161718vim storage.conf// 关注其中几个参数: // 这个其实是我们运行此容器的时候,指定的参数.group_name=group1// 这个端口是Storage的端口,应该是storage和Tracker通信的端口.很重要.// 此端口可以修改,只要是唯一即可.修改成ECS在安全组里放行的端口.[必须是放行的端口.]port=23000// 指定基础路径,存放文件位置的.base_path=/var/fdfs// 扩容的路径store_path0=/var/fdfs//指定tracker服务器的地址,这个在容器运行时,做了指定,在这里也可以手工配置.tracker_server=47.107.177.108:22122// storage服务的端口,客户端从tracker获取到的storage的服务端口.[需要和客户端做通信的.非常关键.]http.server_port=8888// 此端口是storage和客户端进行通信的端口.修改了此端口,就需要修改 storage中的nginx监听端口.// Nginx配置文件: 123456789101112131415161718192021222324cd /usr/local/nginx/conf/vim nginx.conf server &#123; // 指定监听端口,和storage的http.server_port端口一致. listen 8888; server_name localhost; // 指定地址. location ~/group[0-9]/ &#123; ngx_fastdfs_module; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;// =================== 如果不好使的话,这么替换: ==============// 目前阿里云上,我没有配置,也可以直接访问了. // 指定地址. // 配置这个的目的,是为了浏览器能够直接访问到文件. location /group1/M00 &#123; alias /var/fdfs; // storage指定的存储文件的位置. &#125; 个人总结: 上传时候,使用的应该是链接 tracker的22122端口, 从tracker获取storage的8888端口. 此8888端口是我们自己配置的 客户端通过tracker实际是获取到对应storage服务的8888端口. 客户端既要和tracker通信类似Zookeeper 又要和storage通信. 对比Dubbo的架构设计,Zookeeper作为调度中心,客户端优先通过2181访问Zookeeper服务器,然后获得对应接口的远程服务器的ip:port然后调用远程服务器的服务. 很像吧...","categories":[{"name":"docker","slug":"docker","permalink":"http://cynen.github.io/categories/docker/"},{"name":"应用部署","slug":"docker/应用部署","permalink":"http://cynen.github.io/categories/docker/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://cynen.github.io/tags/docker/"},{"name":"fastdfs","slug":"fastdfs","permalink":"http://cynen.github.io/tags/fastdfs/"}]},{"title":"hexo构建博客(三)","slug":"hexo构建博客-三","date":"2019-11-23T17:09:54.000Z","updated":"2019-11-24T13:26:37.154Z","comments":true,"path":"2019/11/24/hexo构建博客-三/","link":"","permalink":"http://cynen.github.io/2019/11/24/hexo%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%89/","excerpt":"","text":"ButterFly 主题的应用.Butterfly主题下载.下载参照上一步的变更主题的链接: hexo构建博客(二),直接搜索 Butterfly 根据README文档,下载对应的主题.1.并且修改_config.yml配置文件,此配置文件是hexo的配置文件,注意和themes主题的配置文件区分.2. 安装对应的依赖. 3.启动服务 hexo s 打开浏览器,输入 localhost:4000 即可看到效果. 参考: roger博客 自定义参数配置.ButterFly 主题的文档有时候打不开,可以参考 hexo-theme-melody ButterFly是基于此主题开发的. 打开 ButterFly 主题的配置文件.针对自定义的参数进行配置. 基本上看英文就知道是什么了,在此,重点关注几个地方: 1.language: 配置语言. 此配置项应该是在hexo的配置文件中配置.目前配置完成后,貌似偶尔不生效.解决办法:将对应主题下的其他language文件全部删除,只留对应配置的语言文件即可解决此问题(不知道为啥). 确保对应的主题中的themes/languages 文件夹下有对应的文件. 2.修改菜单为中文. 3.页面动态效果配置: 需要的就将对应的置为: true即可. 123456canvas_ribbon: 彩带canvas_ribbon_piao: 动态彩带canvas_nest: 页面类似线条网状蒲公英fireworks: 烟火特效,点击后烟花click_heart: 点击时,弹出爱心ClickShowText: 点击时,出现文字 简繁转化我关闭了. 其他的可以自行摸索. 图片配置在md头中,可加入此参数,配置每个md文件的cover[封面] 12cover: https://api.dujin.org/pic/ // 以上是二次元的图源 此处建议尽量配置成单个图片的.以下是微软的bing搜索墙纸https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture这里有一些资料:随机图片API 如果不指定具体的图片,而是每次都重新读取,那么博客的图片也会每次都不一样.但是这个会导致归档的时候,无法展示图片. 搜索配置我们可以看到,Butterfly给我们提供了2种搜索模式. 由于第一种需要配置AppID等参数,我们暂时关闭掉. 开启第二种搜索. [只有开启搜索后,页面上才会有搜索框] 点击搜索,报错. 解决: 找了各种参数,都没有找到怎么解决,百度一下. 发现local_search居然是hexo自带的功能… 参考:Hexo博客,搜索无效解决Hexo开启站内搜索额… 是因为需要安装插件的原因 12npm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 安装完毕后,再刷新页面. 搜索可用! 开启评论功能ButterFly 主题,提供了2中评论功能的插件.一种是 gitalk一种是 valine gitalk的使用:参考:在个人博客添加评论 貌似我配置完之后,没有效果.(有效果的给我反馈一下,我好取消我的learnCloud账号.) 既然gitalk实现不了, 那就使用valine来实现吧. 配置 valine:效果:OK,实现了评论功能! 使用valine注意事项:需要申请learnCloud账号,要支付宝实名认证!要支付宝实名认证!要支付宝实名认证! 注册过程我就不详述了,自己按照步骤来即可的. 参考 : learnCloud入口 Hexo博客,从我突发神经想搞,到现在基本知道怎么整,前后差不多花了一周时间. 一抬头,发现现在都凌晨 2点了,好困好饿…我先去吃碗泡面,休息了,休息了.","categories":[{"name":"兴趣爱好","slug":"兴趣爱好","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/"},{"name":"博客搭建","slug":"兴趣爱好/博客搭建","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://cynen.github.io/tags/hexo/"}]},{"title":"hexo构建博客(二)","slug":"hexo构建博客-二","date":"2019-11-21T15:31:47.000Z","updated":"2019-11-24T13:26:56.618Z","comments":true,"path":"2019/11/21/hexo构建博客-二/","link":"","permalink":"http://cynen.github.io/2019/11/21/hexo%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/","excerpt":"","text":"本节主要是介绍hexo更换主题以及在搭建hexo期间容易产生的问题. Hexo 更换主题经过上面的各种环境搭建，我们的博客可算是基本成形了，接下来就是对博客进行装修，选择一个我们喜欢的主题 我们可以在hexo官方上选择我们喜欢的主题（PS：选择博客主题链接） 选择自己喜欢的主题后点击主题名进入发布人的github 这里以我的博客选择的主题为例 进入对应的GitHub项目之后,获取对应的项目下载链接. 复制主题链接 然后回到blog目录下，找到并进入theme文件夹 右键选择git bash here 输入git clone +你选择的主题链接 下载所选主题 1git clone xxx@ .. themes/tomotoes 然后可以将主题文件夹名修改成较为简便好记的名字，这里修改成tomotoes 然后在blog目录下的_config.yml配置文件中，也就是刚才说的theme配置 修改成所选的主题名 GitHub下载GitHub代码库特别慢在下载tomotoes这个主题项目的时候,可能动不动遇到比较卡的情况,一个小项目clone到信心崩溃. 教一个特别骚气的招数: 忘记是在哪里看到的,作者看到,可以联系我 1.将我们需要clone的GitHub代码,fork到自己的仓库中.2.登录国内一些代码平台,例如 码云3.登陆后,将自己的GitHub代码库同步到码云.4.本地直接clone码云上面的项目,速度快的不要不要的. [需要在码云注册.] 修改主题配置在替换主题后,使用 hexo s启动后,预览,发现界面排版不正常. 需要进入到对应的GitHub阅读文档.[也就是对应的主题提供的GitHub项目] 可见虽然主题更换了，但是一些css和js特效并没有显示出来，可能是这个主题需要特殊的一些配置文件，这时候我们就需要进入设计者的github主页中寻找接下来需要的设置 我们来到设计者的github页面，在主题下载链接下方会发现一个主题配置的要求 接下来就要仔细阅读这些要求，这里还是以我的主题为例 在Readme.md文件中有一些主题脚本或者css显示所需的配置安装 按照上面的配置命令逐一安装，这里就不一一说明了这里需要安装好几个插件 安装完成后再次运行hexo s 再来看看页面,发现已经恢复正常了. tomotoes配置1.开启访问统计: 参考: 不蒜子|不知按照说明配置,很简单. MD 简单总结(1)文件开头： 12345678---title: xxxtags: xxxcategories: xxxdescription: xxxdate: 2018/7/12 22:00:00--- (2)文章摘要：xxx&lt;!--more--&gt; (3)图片插入：![](/img/1.png)（PS：在/blog/source目录下创建img文件夹，以后上传到文章的图片都保存在这里面） (4)http链接插入：[内容](https://) (5)代码区：``` code ``` (6)标题设置： 123456# 一阶标题 ##二阶标题 ###三阶标题 ####四阶标题 #####五阶标题 ######六阶标题 这里md文件的编写，我强烈推荐使用Typora编辑器 最后，一切改动完成后，在blog目录下打开git，输入hexo d –g命令将改动更新到github上即可 问题及解决方1.点击about或者左侧的分类,tags页面报错或者提示找不到.解决办法: 1) 开启标签页: 1hexo new page tags 执行完成会发现/blog/source下面多了tags文件夹，里面有一个index.md文件，在文件头内容中添加： 12layout: tagscomments: false 以此类推,开其他页 开启关于页: 1hexo new page about 在index.md文件中添加内容: 123layout: aboutcomments: truereward: false 参考链接到这里,博客基本骨架搭建完成,后面只剩下自己写博客了. 使用Hexo+github搭建属于自己的博客hexo史上最全搭建教程","categories":[{"name":"兴趣爱好","slug":"兴趣爱好","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/"},{"name":"博客搭建","slug":"兴趣爱好/博客搭建","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://cynen.github.io/tags/hexo/"}]},{"title":"hexo构建博客(一)","slug":"hexo构建博客-一","date":"2019-11-21T13:32:37.000Z","updated":"2019-11-24T13:26:29.651Z","comments":true,"path":"2019/11/21/hexo构建博客-一/","link":"","permalink":"http://cynen.github.io/2019/11/21/hexo%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/","excerpt":"","text":"最近一直在做项目，好多东西都是新学习到的。遇到问题基本都是百度+google，看着别人的博客，总感觉有些知识点也是自己曾经写过，于是就总想着搭建自己的博客，奈何一直各种内心借口，一直拖到最近，发现 了 https://foxgrin.github.io 的个人博客，，，如是，仔细看了一下，发现然来搭建github博客如此简单。内心痒痒。。。 前言我平时记录笔记基本只用有道笔记的，有道笔记的文件夹分类可以无限分，但是每次想找到自己以前记录的笔记时，总是花比较长的时间去找。其次，有道和word其实比较像的，当然在图片这一块做的不错。然后就想搭建自己的博客，从GitHub开始入手吧，等以后经验老道了，再去搭建自己的博客系统。刚好，本次也研究了一下，就以搭建GitHub博客作为自己的开篇博文吧~ 引用foxgrin 准备事项1、进入自己的GitHub账号，创建一个 yourname.github.io的Repository项目名称一定要注意使用自己名称.github.io注册GitHub就没啥好讲的,内事不决问百度,外事不决问谷歌2、开启github pages创建对应的Repository 打开对应的仓库的setting项 开启GitHub pages 选择一款自己喜欢的主题（PS：这个可以先随便选，后面还可以更改） hexo环境搭建官网才是正宗: https://hexo.io/zh-cn/docs/ 1、安装Git安装完成后,记得测试一下: 1git verison 2、安装Nodejs百度教程一大堆注意和官网要求的版本保持一致.Notice: 一般安装完成nodejs后,就会带npm的. 3、安装hexo使用npm安装Hexo 1npm install -g hexo -g 是指全局安装 4、安装完成之后,测试hexo是否安装成功. 1hexo -v 5、初始化hexo文件夹： 1hexo init","categories":[{"name":"兴趣爱好","slug":"兴趣爱好","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/"},{"name":"博客搭建","slug":"兴趣爱好/博客搭建","permalink":"http://cynen.github.io/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://cynen.github.io/tags/hexo/"}]}]}